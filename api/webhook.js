// –≠—Ç–æ—Ç —Ñ–∞–π–ª –Ω—É–∂–µ–Ω –¥–ª—è Vercel - –æ–Ω —Å–ª—É–∂–∏—Ç —Ç–æ—á–∫–æ–π –≤—Ö–æ–¥–∞ –¥–ª—è –≤–µ–±—Ö—É–∫–∞
const { Telegraf } = require('telegraf');
const dotenv = require('dotenv');
const express = require('express');
const axios = require('axios');

// –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
dotenv.config();

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
const bot = new Telegraf(process.env.TELEGRAM_BOT_TOKEN);
const GEMINI_API_KEY = process.env.GEMINI_API_KEY || "AIzaSyA3WOrYYhw6FnePJX3EANcmwH6OvkZW9IE";

// –°–æ–∑–¥–∞–Ω–∏–µ Express –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
const app = express();

// –•—Ä–∞–Ω–∏–ª–∏—â–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
const userStates = {};

// –ü–æ–ª—É—á–∏—Ç—å –∏–ª–∏ —Å–æ–∑–¥–∞—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
function getUserState(userId) {
  if (!userStates[userId]) {
    userStates[userId] = {
      lastPlantData: null,
      lastMessage: null,
      lastImageUrl: null,
      lastImageBase64: null,
      lastPlantName: null,
      lastActionTime: 0,
      sessionStart: new Date(),
      messageCount: 0,
      currentState: null,
      conversationHistory: [],
      lastIdentifiedPlant: null
    };
  }
  return userStates[userId];
}

// –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
const mainMenuKeyboard = () => {
  return {
    keyboard: [
      ['üå± –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ä–∞—Å—Ç–µ–Ω–∏–µ', 'üîç –ü—Ä–æ–±–ª–µ–º–∞ —Å —Ä–∞—Å—Ç–µ–Ω–∏–µ–º'],
      ['üíä –í–∏—Ç–∞–º–∏–Ω—ã –∏ –ø–∏—Ç–∞–Ω–∏–µ', '‚ùì –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å'],
      ['‚ÑπÔ∏è –ü–æ–º–æ—â—å', 'üìù –û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤'],
      ['üë®‚Äçüíª –°–æ–∑–¥–∞—Ç–µ–ª–∏']
    ],
    resize_keyboard: true
  };
};

// –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –¥–µ–π—Å—Ç–≤–∏–π —Å —Ä–∞—Å—Ç–µ–Ω–∏–µ–º
const createPlantActionKeyboard = () => {
  return {
    inline_keyboard: [
      [
        { text: 'üåø –°–æ–≤–µ—Ç—ã –ø–æ —É—Ö–æ–¥—É', callback_data: 'care' },
        { text: '‚ùó –ü—Ä–æ–±–ª–µ–º—ã', callback_data: 'problems' }
      ],
      [
        { text: 'üíä –í–∏—Ç–∞–º–∏–Ω—ã', callback_data: 'vitamins' },
        { text: 'üåç –ü—Ä–æ–∏—Å—Ö–æ–∂–¥–µ–Ω–∏–µ', callback_data: 'origin' }
      ],
      [
        { text: 'üíß –ü–æ–ª–∏–≤', callback_data: 'watering' },
        { text: '‚òÄÔ∏è –û—Å–≤–µ—â–µ–Ω–∏–µ', callback_data: 'light' }
      ],
      [
        { text: 'üå°Ô∏è –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞', callback_data: 'temp' },
        { text: 'üìö –ü–æ–¥—Ä–æ–±–Ω–µ–µ', callback_data: 'info' }
      ]
    ]
  };
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–∑–æ–≤–∞ Gemini API
async function callGeminiAPI(userState, systemPrompt, userPrompt) {
  try {
    // API –∑–∞–ø—Ä–æ—Å
    const response = await axios.post(
      `https://generativelanguage.googleapis.com/v1/models/gemini-2.0-flash-thinking-exp-01-21:generateContent?key=${GEMINI_API_KEY}`,
      {
        contents: [
          {
            role: "user",
            parts: [{ text: `–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –¥–ª—è —Ç–µ–±—è: ${systemPrompt}. –û—Ç–≤–µ—á–∞–π –ø–æ-—Ä—É—Å—Å–∫–∏, –±–µ–∑ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–π –∏ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–π.` }]
          },
          {
            role: "user",
            parts: Array.isArray(userPrompt) 
              ? userPrompt 
              : [{ text: userPrompt }]
          }
        ],
        generationConfig: {
          temperature: 0.7,
          maxOutputTokens: 2048,
        },
      }
    );
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞
    let content = '';
    if (response.data.candidates && response.data.candidates[0] && response.data.candidates[0].content) {
      content = response.data.candidates[0].content.parts[0].text;
    } else {
      throw new Error('Invalid response from Gemini API');
    }
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    content = content.replace(/\*\*(.*?)\*\*/g, "<b>$1</b>");  // Bold
    content = content.replace(/\*(.*?)\*/g, "<i>$1</i>");      // Italic
    content = content.replace(/__(.*?)__/g, "<u>$1</u>");      // Underline
    content = content.replace(/```(.*?)```/gs, "<pre>$1</pre>"); // Code blocks
    content = content.replace(/`(.*?)`/g, "<code>$1</code>");  // Inline code
    content = content.replace(/#{1,6} (.*?)(?:\n|$)/g, "<b>$1</b>\n"); // Headers
    
    // –£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–π –≤ —Ç–µ–∫—Å—Ç–µ
    content = content.replace(/(?:–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ|–ü—Ä–∏–≤–µ—Ç|–î–æ–±—Ä—ã–π –¥–µ–Ω—å)[!,.]?\s*/gi, '');
    content = content.replace(/(?:–Ø|—ç—Ç–æ)?\s*PLEXY[,\s]+(—ç–∫—Å–ø–µ—Ä—Ç|–ø–æ–º–æ—â–Ω–∏–∫|–±–æ—Ç|—Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç)[^\.]*?(?:Plexy Lab|PlexiLab)[.,]?\s*/gi, '');
    content = content.replace(/–Ø\s*‚Äî\s*PLEXY[,\s][^\.]*?(?:Plexy Lab|PlexiLab)[.,]?\s*/gi, '');
    content = content.replace(/–Ø\s*‚Äî\s*(?:–±–æ–ª—å—à–∞—è —è–∑—ã–∫–æ–≤–∞—è –º–æ–¥–µ–ª—å|–º–æ–¥–µ–ª—å|–Ω–µ–π—Ä–æ—Å–µ—Ç—å)[^\.]*?(?:Google|OpenAI|Anthropic)[.,]?\s*/gi, '');
    
    return content;
  } catch (error) {
    console.error("Error calling Gemini API:", error);
    return "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—Ç–≤–µ—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.";
  }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
bot.on('photo', async (ctx) => {
  try {
    const userId = ctx.from.id;
    const userState = getUserState(userId);
    
    // –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø—Ä–æ—Ü–µ—Å—Å–µ
    const processingMessage = await ctx.reply('–ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ...');
    
    // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ñ–æ—Ç–æ
    const photoId = ctx.message.photo[ctx.message.photo.length - 1].file_id;
    const fileLink = await ctx.telegram.getFileLink(photoId);
    
    // –ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    const imageResponse = await axios.get(fileLink.href, { responseType: 'arraybuffer' });
    const imageBuffer = Buffer.from(imageResponse.data, 'binary');
    const base64Image = imageBuffer.toString('base64');
    
    // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    userState.lastImageUrl = fileLink.href;
    userState.lastImageBase64 = base64Image;
    
    // –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∏
    const caption = ctx.message.caption || '';
    
    // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ –∑–∞–ø—Ä–æ—Å–∞ (–∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –∏–ª–∏ –ø—Ä–æ–±–ª–µ–º–∞)
    const isPlantProblem = userState.currentState === 'waiting_for_problem_description' || 
                          caption.toLowerCase().includes('–ø—Ä–æ–±–ª–µ–º–∞') || 
                          caption.toLowerCase().includes('–±–æ–ª–µ–∑–Ω—å');
    
    // –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞
    let systemPrompt = isPlantProblem
      ? '–û–ø—Ä–µ–¥–µ–ª–∏ —Ä–∞—Å—Ç–µ–Ω–∏–µ –Ω–∞ —Ñ–æ—Ç–æ –∏ –æ–ø–∏—à–∏ –≤–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã, –∫–æ—Ç–æ—Ä—ã–µ –≤–∏–¥–Ω—ã. –ü—Ä–µ–¥–ª–æ–∂–∏ –º–µ—Ç–æ–¥—ã —Ä–µ—à–µ–Ω–∏—è. –ù–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–π—Å—è.'
      : '–û–ø—Ä–µ–¥–µ–ª–∏ —Ä–∞—Å—Ç–µ–Ω–∏–µ –Ω–∞ —Ñ–æ—Ç–æ, —É–∫–∞–∂–∏ –µ–≥–æ –Ω–∞—É—á–Ω–æ–µ –∏ –æ–±–∏—Ö–æ–¥–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ. –û–ø–∏—à–∏ –æ—Å–Ω–æ–≤–Ω—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –∏ —É—Å–ª–æ–≤–∏—è —É—Ö–æ–¥–∞. –ù–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–π—Å—è.';
    
    try {
      // –ó–∞–ø—Ä–æ—Å –∫ Gemini API —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º
      const response = await axios.post(
        `https://generativelanguage.googleapis.com/v1/models/gemini-2.0-flash-thinking-exp-01-21:generateContent?key=${GEMINI_API_KEY}`,
        {
          contents: [
            {
              role: "user",
              parts: [
                {
                  text: `–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –¥–ª—è —Ç–µ–±—è: ${systemPrompt}. –ß–µ—Ç–∫–æ —É–∫–∞–∂–∏ –Ω–∞—É—á–Ω–æ–µ –∏ –æ–±–∏—Ö–æ–¥–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–∞—Å—Ç–µ–Ω–∏—è –≤ –Ω–∞—á–∞–ª–µ –æ—Ç–≤–µ—Ç–∞.`
                }
              ]
            },
            {
              role: "user",
              parts: [
                {
                  text: caption || '–û–ø—Ä–µ–¥–µ–ª–∏ —ç—Ç–æ —Ä–∞—Å—Ç–µ–Ω–∏–µ –∏ —Ä–∞—Å—Å–∫–∞–∂–∏ –æ –Ω–µ–º'
                },
                {
                  inline_data: {
                    mime_type: "image/jpeg",
                    data: base64Image
                  }
                }
              ]
            }
          ],
          generationConfig: {
            temperature: 0.4,
            maxOutputTokens: 2048,
          },
        }
      );
      
      let content = '';
      if (response.data.candidates && response.data.candidates[0] && response.data.candidates[0].content) {
        content = response.data.candidates[0].content.parts[0].text;
      } else {
        throw new Error('Invalid response from Gemini API');
      }
      
      // –û—á–∏—Å—Ç–∫–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –æ—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
      let cleanContent = content
        .replace(/\*\*/g, '')
        .replace(/\*/g, '')
        .replace(/#{1,6}/g, '')
        .replace(/`/g, '');
      
      // –ü–æ–∏—Å–∫ –Ω–∞–∑–≤–∞–Ω–∏—è —Ä–∞—Å—Ç–µ–Ω–∏—è
      const namePatterns = [
        /(?:–ù–∞—É—á–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ|–ù–∞—É—á–Ω–æ–µ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ|–õ–∞—Ç–∏–Ω—Å–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ):\s*([^\.,:;\n]+)/i,
        /(?:–ù–∞–∑–≤–∞–Ω–∏–µ|–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ|–†–∞—Å—Ç–µ–Ω–∏–µ –Ω–∞–∑—ã–≤–∞–µ—Ç—Å—è):\s*([^\.,:;\n]+)/i,
        /(?:–ù–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏|–ù–∞ —Ñ–æ—Ç–æ)[^\.]*?(?:—Ä–∞—Å—Ç–µ–Ω–∏–µ|—Ü–≤–µ—Ç–æ–∫)\s+([^\.,:;\n]+)/i
      ];
      
      for (const pattern of namePatterns) {
        const match = cleanContent.match(pattern);
        if (match && match[1]) {
          userState.lastIdentifiedPlant = match[1].trim();
          break;
        }
      }
      
      // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞
      content = content.replace(/\*\*(.*?)\*\*/g, "<b>$1</b>");
      content = content.replace(/\*(.*?)\*/g, "<i>$1</i>");
      content = content.replace(/#{1,6} (.*?)(?:\n|$)/g, "<b>$1</b>\n");
      
      // –£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–π
      content = content.replace(/(?:–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ|–ü—Ä–∏–≤–µ—Ç|–î–æ–±—Ä—ã–π –¥–µ–Ω—å)[!,.]?\s*/gi, '');
      content = content.replace(/(?:–Ø|—ç—Ç–æ)?\s*PLEXY[,\s]+(—ç–∫—Å–ø–µ—Ä—Ç|–ø–æ–º–æ—â–Ω–∏–∫|–±–æ—Ç|—Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç)[^\.]*?(?:Plexy Lab|PlexiLab)[.,]?\s*/gi, '');
      content = content.replace(/–Ø\s*‚Äî\s*(?:–±–æ–ª—å—à–∞—è —è–∑—ã–∫–æ–≤–∞—è –º–æ–¥–µ–ª—å|–º–æ–¥–µ–ª—å|–Ω–µ–π—Ä–æ—Å–µ—Ç—å)[^\.]*?(?:Google|OpenAI|Anthropic)[.,]?\s*/gi, '');
      
      // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –æ—Ç–≤–µ—Ç–æ–º
      await ctx.telegram.editMessageText(
        ctx.chat.id,
        processingMessage.message_id,
        undefined,
        content,
        { parse_mode: 'HTML' }
      );
      
      // –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ –¥–µ–π—Å—Ç–≤–∏—è–º–∏
      await ctx.reply(
        '–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å –µ—â–µ?',
        { reply_markup: createPlantActionKeyboard() }
      );
      
    } catch (error) {
      console.error('Error processing image:', error);
      await ctx.telegram.editMessageText(
        ctx.chat.id,
        processingMessage.message_id,
        undefined,
        '–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ —Å –±–æ–ª–µ–µ —á–µ—Ç–∫–∏–º —Ñ–æ—Ç–æ.'
      );
    }
    
  } catch (error) {
    console.error('Error handling photo:', error);
    await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
bot.on('text', async (ctx) => {
  try {
    const userMessage = ctx.message.text;
    const userId = ctx.from.id;
    const userState = getUserState(userId);
    
    // –ü—Ä–æ–ø—É—Å–∫ –∫–Ω–æ–ø–æ–∫ –º–µ–Ω—é –∏ –∫–æ–º–∞–Ω–¥
    const buttonResponses = [
      'üå± –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ä–∞—Å—Ç–µ–Ω–∏–µ', 'üîç –ü—Ä–æ–±–ª–µ–º–∞ —Å —Ä–∞—Å—Ç–µ–Ω–∏–µ–º',
      'üíä –í–∏—Ç–∞–º–∏–Ω—ã –∏ –ø–∏—Ç–∞–Ω–∏–µ', '‚ùì –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å',
      '‚ÑπÔ∏è –ü–æ–º–æ—â—å', 'üìù –û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤', 'üë®‚Äçüíª –°–æ–∑–¥–∞—Ç–µ–ª–∏',
      '¬´ –ù–∞–∑–∞–¥', '¬´ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é',
      'üíä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–∏—Ç–∞–º–∏–Ω–∞—Ö', 'ü•ó –ó–¥–æ—Ä–æ–≤–æ–µ –ø–∏—Ç–∞–Ω–∏–µ',
      'ü©∫ –°–∏–º–ø—Ç–æ–º—ã –∞–≤–∏—Ç–∞–º–∏–Ω–æ–∑–∞', 'üí° –°–æ–≤–µ—Ç—ã –ø–æ –ø–∏—Ç–∞–Ω–∏—é'
    ];
    
    if (buttonResponses.includes(userMessage) || userMessage.startsWith('/')) {
      if (userMessage === 'üå± –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ä–∞—Å—Ç–µ–Ω–∏–µ') {
        userState.currentState = 'waiting_for_photo';
        return ctx.reply('–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ —Ä–∞—Å—Ç–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å', {
          reply_markup: { keyboard: [['¬´ –ù–∞–∑–∞–¥']], resize_keyboard: true }
        });
      }
      
      if (userMessage === 'üîç –ü—Ä–æ–±–ª–µ–º–∞ —Å —Ä–∞—Å—Ç–µ–Ω–∏–µ–º') {
        userState.currentState = 'waiting_for_problem_description';
        return ctx.reply('–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ —Ä–∞—Å—Ç–µ–Ω–∏—è —Å –ø—Ä–æ–±–ª–µ–º–æ–π –∏ –Ω–∞–ø–∏—à–∏—Ç–µ –∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã –≤ –ø–æ–¥–ø–∏—Å–∏ –∫ —Ñ–æ—Ç–æ', {
          reply_markup: { keyboard: [['¬´ –ù–∞–∑–∞–¥']], resize_keyboard: true }
        });
      }
      
      if (userMessage === '¬´ –ù–∞–∑–∞–¥' || userMessage === '¬´ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é') {
        userState.currentState = null;
        return ctx.reply('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', {
          reply_markup: mainMenuKeyboard()
        });
      }
      
      if (userMessage === 'üë®‚Äçüíª –°–æ–∑–¥–∞—Ç–µ–ª–∏') {
        return ctx.reply('<b>–°–æ–∑–¥–∞—Ç–µ–ª–∏ –±–æ—Ç–∞:</b>\n\n@qynon –ö–µ–Ω–∂–µ“ì–∞–ª–∏ –ù“±—Ä–∞—Å\n@iapmon –°–∞—Ä—Å–µ–Ω–±–∏“ì–∞–ª–∏“õ—ã–∑—ã –ó–µ—Ä–µ', {
          parse_mode: 'HTML',
          reply_markup: mainMenuKeyboard()
        });
      }
      
      if (userMessage === '/start') {
        const welcomeMessage = `
–ü—Ä–∏–≤–µ—Ç! üëã –Ø –±–æ—Ç –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ä–∞—Å—Ç–µ–Ω–∏–π.

–Ø –º–æ–≥—É –ø–æ–º–æ—á—å –≤–∞–º —Å:
üå± –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ–º —Ä–∞—Å—Ç–µ–Ω–∏–π –ø–æ —Ñ–æ—Ç–æ
üîç –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–æ–π –ø—Ä–æ–±–ª–µ–º —Å —Ä–∞—Å—Ç–µ–Ω–∏—è–º–∏
üçé –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –≤–∏—Ç–∞–º–∏–Ω–∞—Ö –∏ –º–∏–Ω–µ—Ä–∞–ª–∞—Ö
‚ôªÔ∏è –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –±—ã—Ç–æ–≤—ã—Ö –æ—Ç—Ö–æ–¥–æ–≤ –¥–ª—è —É–¥–æ–±—Ä–µ–Ω–∏–π
‚ùì –†–µ—à–µ–Ω–∏–µ–º —Ç–∏–ø–∏—á–Ω—ã—Ö –ø—Ä–æ–±–ª–µ–º —Å —Ä–∞—Å—Ç–µ–Ω–∏—è–º–∏

–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ —Ä–∞—Å—Ç–µ–Ω–∏—è –¥–ª—è –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é –Ω–∏–∂–µ:
        `;
        
        return ctx.reply(welcomeMessage, {
          reply_markup: mainMenuKeyboard()
        });
      }
      
      if (userMessage === '‚ÑπÔ∏è –ü–æ–º–æ—â—å' || userMessage === '/help') {
        return ctx.reply(
          '–Ø –ø–æ–º–æ–≥—É –≤–∞–º –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ä–∞—Å—Ç–µ–Ω–∏—è –∏ —É–∑–Ω–∞—Ç—å –æ –Ω–∏—Ö –±–æ–ª—å—à–µ.\n\n' +
          '–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ —Ä–∞—Å—Ç–µ–Ω–∏—è, –∏ —è —Ä–∞—Å—Å–∫–∞–∂—É, —á—Ç–æ —ç—Ç–æ –∑–∞ —Ä–∞—Å—Ç–µ–Ω–∏–µ, –∫–∞–∫ –∑–∞ –Ω–∏–º —É—Ö–∞–∂–∏–≤–∞—Ç—å.\n\n' +
          '–ï—Å–ª–∏ —É —Ä–∞—Å—Ç–µ–Ω–∏—è –µ—Å—Ç—å –ø—Ä–æ–±–ª–µ–º–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –∏ –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã –≤ –ø–æ–¥–ø–∏—Å–∏.\n\n' +
          '–í—ã —Ç–∞–∫–∂–µ –º–æ–∂–µ—Ç–µ —É–∑–Ω–∞—Ç—å –æ –≤–∏—Ç–∞–º–∏–Ω–∞—Ö –∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–∏—Ç–∞–Ω–∏–∏ –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–º —Ä–∞–∑–¥–µ–ª–µ –º–µ–Ω—é.',
          { reply_markup: mainMenuKeyboard() }
        );
      }
      
      if (userMessage === 'üìù –û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤') {
        userState.currentState = 'waiting_for_feedback';
        return ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –æ—Ç–∑—ã–≤ –∏–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –ø–æ —É–ª—É—á—à–µ–Ω–∏—é –±–æ—Ç–∞', {
          reply_markup: { keyboard: [['¬´ –ù–∞–∑–∞–¥']], resize_keyboard: true }
        });
      }
      
      if (userMessage === 'üíä –í–∏—Ç–∞–º–∏–Ω—ã –∏ –ø–∏—Ç–∞–Ω–∏–µ') {
        return ctx.reply(
          '–†–∞–∑–¥–µ–ª –æ –≤–∏—Ç–∞–º–∏–Ω–∞—Ö –∏ –ø–∏—Ç–∞–Ω–∏–∏',
          {
            reply_markup: {
              keyboard: [
                ['üíä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–∏—Ç–∞–º–∏–Ω–∞—Ö', 'ü•ó –ó–¥–æ—Ä–æ–≤–æ–µ –ø–∏—Ç–∞–Ω–∏–µ'],
                ['ü©∫ –°–∏–º–ø—Ç–æ–º—ã –∞–≤–∏—Ç–∞–º–∏–Ω–æ–∑–∞', 'üí° –°–æ–≤–µ—Ç—ã –ø–æ –ø–∏—Ç–∞–Ω–∏—é'],
                ['¬´ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é']
              ],
              resize_keyboard: true
            }
          }
        );
      }
      
      if (userMessage === 'üíä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–∏—Ç–∞–º–∏–Ω–∞—Ö') {
        const processingMessage = await ctx.reply('–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤–∏—Ç–∞–º–∏–Ω–∞—Ö...');
        
        const systemPrompt = '–ü—Ä–µ–¥–æ—Å—Ç–∞–≤—å –∫—Ä–∞—Ç–∫—É—é, –Ω–æ –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∏—Ç–∞–º–∏–Ω–∞—Ö, –∏—Ö —Ñ—É–Ω–∫—Ü–∏—è—Ö –≤ –æ—Ä–≥–∞–Ω–∏–∑–º–µ, —Å—É—Ç–æ—á–Ω–æ–π –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–∏ –∏ –≤ –∫–∞–∫–∏—Ö –ø—Ä–æ–¥—É–∫—Ç–∞—Ö –æ–Ω–∏ —Å–æ–¥–µ—Ä–∂–∞—Ç—Å—è. –°–æ—Å—Ç–∞–≤—å —Å–ø–∏—Å–æ–∫ –æ—Å–Ω–æ–≤–Ω—ã—Ö –≤–∏—Ç–∞–º–∏–Ω–æ–≤ (A, –≥—Ä—É–ø–ø–∞ B, C, D, E, K) —Å –∫—Ä–∞—Ç–∫–∏–º –æ–ø–∏—Å–∞–Ω–∏–µ–º.';
        
        const response = await callGeminiAPI(userState, systemPrompt, '–†–∞—Å—Å–∫–∞–∂–∏ –æ –≤–∏—Ç–∞–º–∏–Ω–∞—Ö, –∏—Ö —Ñ—É–Ω–∫—Ü–∏—è—Ö –∏ –ø–æ–ª—å–∑–µ');
        
        await ctx.telegram.editMessageText(
          ctx.chat.id,
          processingMessage.message_id,
          undefined,
          response,
          { parse_mode: 'HTML' }
        );
        return;
      }
      
      if (userMessage === 'ü•ó –ó–¥–æ—Ä–æ–≤–æ–µ –ø–∏—Ç–∞–Ω–∏–µ') {
        const processingMessage = await ctx.reply('–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–¥–æ—Ä–æ–≤–æ–º –ø–∏—Ç–∞–Ω–∏–∏...');
        
        const systemPrompt = '–ü—Ä–µ–¥–æ—Å—Ç–∞–≤—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–∏–Ω—Ü–∏–ø–∞—Ö –∑–¥–æ—Ä–æ–≤–æ–≥–æ –ø–∏—Ç–∞–Ω–∏—è, –±–∞–ª–∞–Ω—Å–µ –ø–∏—Ç–∞—Ç–µ–ª—å–Ω—ã—Ö –≤–µ—â–µ—Å—Ç–≤, —Ä–µ–∂–∏–º–µ –ø–∏—Ç–∞–Ω–∏—è –∏ –ø–æ–ª–µ–∑–Ω—ã—Ö –ø—Ä–∏–≤—ã—á–∫–∞—Ö. –î–æ–±–∞–≤—å –ø—Ä–∏–º–µ—Ä—ã –∑–¥–æ—Ä–æ–≤—ã—Ö –±–ª—é–¥.';
        
        const response = await callGeminiAPI(userState, systemPrompt, '–†–∞—Å—Å–∫–∞–∂–∏ –æ –ø—Ä–∏–Ω—Ü–∏–ø–∞—Ö –∑–¥–æ—Ä–æ–≤–æ–≥–æ –ø–∏—Ç–∞–Ω–∏—è');
        
        await ctx.telegram.editMessageText(
          ctx.chat.id,
          processingMessage.message_id,
          undefined,
          response,
          { parse_mode: 'HTML' }
        );
        return;
      }
      
      if (userMessage === 'ü©∫ –°–∏–º–ø—Ç–æ–º—ã –∞–≤–∏—Ç–∞–º–∏–Ω–æ–∑–∞') {
        const processingMessage = await ctx.reply('–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–∏–º–ø—Ç–æ–º–∞—Ö –∞–≤–∏—Ç–∞–º–∏–Ω–æ–∑–∞...');
        
        const systemPrompt = '–û–ø–∏—à–∏ –æ—Å–Ω–æ–≤–Ω—ã–µ —Å–∏–º–ø—Ç–æ–º—ã –Ω–µ—Ö–≤–∞—Ç–∫–∏ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –≤–∏—Ç–∞–º–∏–Ω–æ–≤ –∏ –º–∏–Ω–µ—Ä–∞–ª–æ–≤ –≤ –æ—Ä–≥–∞–Ω–∏–∑–º–µ, –Ω–∞ –∫–∞–∫–∏–µ –ø—Ä–∏–∑–Ω–∞–∫–∏ —Å—Ç–æ–∏—Ç –æ–±—Ä–∞—Ç–∏—Ç—å –≤–Ω–∏–º–∞–Ω–∏–µ –∏ –∫–∞–∫ –≤–æ—Å–ø–æ–ª–Ω–∏—Ç—å –¥–µ—Ñ–∏—Ü–∏—Ç –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–º –ø—É—Ç–µ–º.';
        
        const response = await callGeminiAPI(userState, systemPrompt, '–†–∞—Å—Å–∫–∞–∂–∏ –æ —Å–∏–º–ø—Ç–æ–º–∞—Ö –∞–≤–∏—Ç–∞–º–∏–Ω–æ–∑–∞');
        
        await ctx.telegram.editMessageText(
          ctx.chat.id,
          processingMessage.message_id,
          undefined,
          response,
          { parse_mode: 'HTML' }
        );
        return;
      }
      
      if (userMessage === 'üí° –°–æ–≤–µ—Ç—ã –ø–æ –ø–∏—Ç–∞–Ω–∏—é') {
        const processingMessage = await ctx.reply('–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Å–æ–≤–µ—Ç–æ–≤ –ø–æ –ø–∏—Ç–∞–Ω–∏—é...');
        
        const systemPrompt = '–î–∞–π –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ —Å–æ–≤–µ—Ç—ã –ø–æ —É–ª—É—á—à–µ–Ω–∏—é —Ä–∞—Ü–∏–æ–Ω–∞ –ø–∏—Ç–∞–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –ª–µ–≥–∫–æ –≤–Ω–µ–¥—Ä–∏—Ç—å –≤ –ø–æ–≤—Å–µ–¥–Ω–µ–≤–Ω—É—é –∂–∏–∑–Ω—å. –ü—Ä–µ–¥–ª–æ–∂–∏ —Å–ø–∏—Å–æ–∫ –ø–æ–ª–µ–∑–Ω—ã—Ö –ø–µ—Ä–µ–∫—É—Å–æ–≤, —Å–ø–æ—Å–æ–±—ã –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è –∑–¥–æ—Ä–æ–≤–æ–π –ø–∏—â–∏ –∏ –∫–∞–∫ —Å–¥–µ–ª–∞—Ç—å –ø–∏—Ç–∞–Ω–∏–µ –±–æ–ª–µ–µ —Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–º.';
        
        const response = await callGeminiAPI(userState, systemPrompt, '–î–∞–π –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ —Å–æ–≤–µ—Ç—ã –ø–æ —É–ª—É—á—à–µ–Ω–∏—é –ø–∏—Ç–∞–Ω–∏—è');
        
        await ctx.telegram.editMessageText(
          ctx.chat.id,
          processingMessage.message_id,
          undefined,
          response,
          { parse_mode: 'HTML' }
        );
        return;
      }
      
      if (userMessage === '‚ùì –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å') {
        userState.currentState = 'waiting_for_question';
        return ctx.reply('–ó–∞–¥–∞–π—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å –æ —Ä–∞—Å—Ç–µ–Ω–∏—è—Ö, –≤–∏—Ç–∞–º–∏–Ω–∞—Ö –∏–ª–∏ –ø–∏—Ç–∞–Ω–∏–∏', {
          reply_markup: { keyboard: [['¬´ –ù–∞–∑–∞–¥']], resize_keyboard: true }
        });
      }
      
      return;
    }
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–∑—ã–≤–∞
    if (userState.currentState === 'waiting_for_feedback') {
      await ctx.reply('–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –æ—Ç–∑—ã–≤! –ú—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —É—á—Ç–µ–º –≤–∞—à–µ –º–Ω–µ–Ω–∏–µ.');
      userState.currentState = null;
      return await ctx.reply('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', {
        reply_markup: mainMenuKeyboard()
      });
    }
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ–ø—Ä–æ—Å–æ–≤ –æ–± –∏–¥–µ–Ω—Ç–∏—á–Ω–æ—Å—Ç–∏
    const lowerMessage = userMessage.toLowerCase();
    if (lowerMessage.includes('–∫—Ç–æ —Ç–µ–±—è —Å–æ–∑–¥–∞–ª') || 
        lowerMessage.includes('–∫—Ç–æ —Ç—ã') || 
        lowerMessage.includes('—á—Ç–æ —Ç—ã') || 
        lowerMessage.includes('–∫–∞–∫–æ–π —Ç—ã') ||
        lowerMessage.includes('—Ç–≤–æ–π —Å–æ–∑–¥–∞—Ç–µ–ª—å')) {
      return await ctx.reply('–Ø –±–æ—Ç –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ä–∞—Å—Ç–µ–Ω–∏–π –∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è —Å–æ–≤–µ—Ç–æ–≤ –ø–æ —É—Ö–æ–¥—É –∑–∞ –Ω–∏–º–∏.');
    }
    
    if (lowerMessage.includes('–∫–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç') || 
        lowerMessage.includes('—Ç–≤–æ—ë –∏–º—è') || 
        lowerMessage.includes('—Ç–≤–æ–µ –∏–º—è') || 
        lowerMessage.includes('–∏–º—è —É —Ç–µ–±—è')) {
      return await ctx.reply('–Ø –±–æ—Ç –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ä–∞—Å—Ç–µ–Ω–∏–π –∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è —Å–æ–≤–µ—Ç–æ–≤ –ø–æ —É—Ö–æ–¥—É –∑–∞ –Ω–∏–º–∏.');
    }
    
    if (lowerMessage.includes('—Ç—ã —á–µ–ª–æ–≤–µ–∫') || 
        lowerMessage.includes('—Ç—ã –±–æ—Ç') || 
        lowerMessage.includes('—Ç—ã —Ä–æ–±–æ—Ç')) {
      return await ctx.reply('–Ø –±–æ—Ç –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ä–∞—Å—Ç–µ–Ω–∏–π –∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è —Å–æ–≤–µ—Ç–æ–≤ –ø–æ —É—Ö–æ–¥—É –∑–∞ –Ω–∏–º–∏.');
    }
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—ã—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π —á–µ—Ä–µ–∑ AI
    const processingMessage = await ctx.reply('–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≤–∞—à –∑–∞–ø—Ä–æ—Å...');
    
    const systemPrompt = '–¢—ã ‚Äî —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –≤–∏—Ç–∞–º–∏–Ω–∞–º, –º–∏–Ω–µ—Ä–∞–ª–∞–º –∏ —É—Ö–æ–¥—É –∑–∞ —Ä–∞—Å—Ç–µ–Ω–∏—è–º–∏. ' +
                       '–¢—ã –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—à—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ—É–Ω–∫—Ü–∏—è—Ö –≤–∏—Ç–∞–º–∏–Ω–æ–≤ –≤ –æ—Ä–≥–∞–Ω–∏–∑–º–µ, –ø—Ä–∏–∑–Ω–∞–∫–∞—Ö –¥–µ—Ñ–∏—Ü–∏—Ç–∞ –∏ –ø–µ—Ä–µ–¥–æ–∑–∏—Ä–æ–≤–∫–∏, ' +
                       '–∞ —Ç–∞–∫–∂–µ –æ —Ç–æ–º, –∫–∞–∫ —É—Ö–∞–∂–∏–≤–∞—Ç—å –∑–∞ –∫–æ–º–Ω–∞—Ç–Ω—ã–º–∏ —Ä–∞—Å—Ç–µ–Ω–∏—è–º–∏. ' +
                       '–¢–≤–æ–∏ –æ—Ç–≤–µ—Ç—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–º–∏, –Ω–æ –∫—Ä–∞—Ç–∫–∏–º–∏.';
                       
    const response = await callGeminiAPI(userState, systemPrompt, userMessage);
    
    await ctx.telegram.editMessageText(
      ctx.chat.id,
      processingMessage.message_id,
      undefined,
      response,
      { parse_mode: 'HTML' }
    );
  } catch (error) {
    console.error('Error processing message:', error);
    await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ callback-–∑–∞–ø—Ä–æ—Å–æ–≤ (–∫–Ω–æ–ø–æ–∫)
bot.action('care', async (ctx) => {
  await ctx.answerCbQuery();
  const userId = ctx.from.id;
  const userState = getUserState(userId);
  
  await ctx.reply('–°–æ–≤–µ—Ç—ã –ø–æ —É—Ö–æ–¥—É –∑–∞ —Ä–∞—Å—Ç–µ–Ω–∏–µ–º:');
  
  const systemPrompt = '–î–∞–π –∫—Ä–∞—Ç–∫–∏–µ –∏ –ø–æ–ª–µ–∑–Ω—ã–µ —Å–æ–≤–µ—Ç—ã –ø–æ —É—Ö–æ–¥—É –∑–∞ —Ä–∞—Å—Ç–µ–Ω–∏–µ–º (–ø–æ–ª–∏–≤, –æ—Å–≤–µ—â–µ–Ω–∏–µ, —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞, –≤–ª–∞–∂–Ω–æ—Å—Ç—å, –≥—Ä—É–Ω—Ç –∏ –ø–æ–¥–∫–æ—Ä–º–∫–∞). –ò—Å–ø–æ–ª—å–∑—É–π —á–µ—Ç–∫–∏–µ —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫–∏. –ù–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–π—Å—è –∏ –Ω–µ —É–ø–æ–º–∏–Ω–∞–π Plexy –∏–ª–∏ Plexy Lab.';
  
  let userPrompt = '–î–∞–π —Å–æ–≤–µ—Ç—ã –ø–æ —É—Ö–æ–¥—É –∑–∞ —Ä–∞—Å—Ç–µ–Ω–∏–µ–º';
  if (userState.lastIdentifiedPlant) {
    userPrompt = `–î–∞–π –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Å–æ–≤–µ—Ç—ã –ø–æ —É—Ö–æ–¥—É –∑–∞ —Ä–∞—Å—Ç–µ–Ω–∏–µ–º ${userState.lastIdentifiedPlant}, –æ—Å–Ω–æ–≤—ã–≤–∞—è—Å—å –Ω–∞ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç—è—Ö –∏–º–µ–Ω–Ω–æ —ç—Ç–æ–≥–æ –≤–∏–¥–∞`;
  }
  
  const response = await callGeminiAPI(userState, systemPrompt, userPrompt);
  await ctx.reply(response, { parse_mode: 'HTML' });
});

bot.action('problems', async (ctx) => {
  await ctx.answerCbQuery();
  const userId = ctx.from.id;
  const userState = getUserState(userId);
  
  await ctx.reply('–¢–∏–ø–∏—á–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã —Ä–∞—Å—Ç–µ–Ω–∏—è:');
  
  const systemPrompt = '–û–ø–∏—à–∏ 3-5 –Ω–∞–∏–±–æ–ª–µ–µ —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –ø—Ä–æ–±–ª–µ–º —Å —ç—Ç–∏–º —Ä–∞—Å—Ç–µ–Ω–∏–µ–º, –∏—Ö –ø—Ä–∏–∑–Ω–∞–∫–∏ –∏ —Å–ø–æ—Å–æ–±—ã —Ä–µ—à–µ–Ω–∏—è. –ù–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–π—Å—è.';
  
  let userPrompt = '–û–ø–∏—à–∏ —Ç–∏–ø–∏—á–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã —Ä–∞—Å—Ç–µ–Ω–∏—è';
  if (userState.lastIdentifiedPlant) {
    userPrompt = `–û–ø–∏—à–∏ —Ç–∏–ø–∏—á–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã –∏–º–µ–Ω–Ω–æ –¥–ª—è ${userState.lastIdentifiedPlant}, —Å —á–µ–º —á–∞—Å—Ç–æ —Å—Ç–∞–ª–∫–∏–≤–∞—é—Ç—Å—è –≤–ª–∞–¥–µ–ª—å—Ü—ã —ç—Ç–æ–≥–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –≤–∏–¥–∞`;
  }
  
  const response = await callGeminiAPI(userState, systemPrompt, userPrompt);
  await ctx.reply(response, { parse_mode: 'HTML' });
});

bot.action('vitamins', async (ctx) => {
  await ctx.answerCbQuery();
  const userId = ctx.from.id;
  const userState = getUserState(userId);
  
  await ctx.reply('–ù–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –≤–∏—Ç–∞–º–∏–Ω—ã –∏ –º–∏–∫—Ä–æ—ç–ª–µ–º–µ–Ω—Ç—ã:');
  
  const systemPrompt = '–†–∞—Å—Å–∫–∞–∂–∏ –æ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–ª—è —ç—Ç–æ–≥–æ —Ä–∞—Å—Ç–µ–Ω–∏—è –≤–∏—Ç–∞–º–∏–Ω–∞—Ö –∏ –º–∏–∫—Ä–æ—ç–ª–µ–º–µ–Ω—Ç–∞—Ö. –£–∫–∞–∂–∏ –ø—Ä–∏–∑–Ω–∞–∫–∏ –∏—Ö –Ω–µ–¥–æ—Å—Ç–∞—Ç–∫–∞ –∏ —Å–ø–æ—Å–æ–±—ã –ø–æ–¥–∫–æ—Ä–º–∫–∏.';
  
  let userPrompt = '–†–∞—Å—Å–∫–∞–∂–∏ –æ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –≤–∏—Ç–∞–º–∏–Ω–∞—Ö –∏ –º–∏–∫—Ä–æ—ç–ª–µ–º–µ–Ω—Ç–∞—Ö –¥–ª—è —Ä–∞—Å—Ç–µ–Ω–∏—è';
  if (userState.lastIdentifiedPlant) {
    userPrompt = `–†–∞—Å—Å–∫–∞–∂–∏ –æ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –≤–∏—Ç–∞–º–∏–Ω–∞—Ö –∏ –º–∏–∫—Ä–æ—ç–ª–µ–º–µ–Ω—Ç–∞—Ö –¥–ª—è —Ä–∞—Å—Ç–µ–Ω–∏—è ${userState.lastIdentifiedPlant}`;
  }
  
  const response = await callGeminiAPI(userState, systemPrompt, userPrompt);
  await ctx.reply(response, { parse_mode: 'HTML' });
});

bot.action('origin', async (ctx) => {
  await ctx.answerCbQuery();
  const userId = ctx.from.id;
  const userState = getUserState(userId);
  
  await ctx.reply('–ü—Ä–æ–∏—Å—Ö–æ–∂–¥–µ–Ω–∏–µ –∏ –∏—Å—Ç–æ—Ä–∏—è —Ä–∞—Å—Ç–µ–Ω–∏—è:');
  
  const systemPrompt = '–†–∞—Å—Å–∫–∞–∂–∏ –æ–± –∏—Å—Ç–æ—Ä–∏–∏, –ø—Ä–æ–∏—Å—Ö–æ–∂–¥–µ–Ω–∏–∏ –∏ —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–µ–Ω–∏–∏ —ç—Ç–æ–≥–æ —Ä–∞—Å—Ç–µ–Ω–∏—è. –í–∫–ª—é—á–∏ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ —Ñ–∞–∫—Ç—ã.';
  
  let userPrompt = '–†–∞—Å—Å–∫–∞–∂–∏ –æ –ø—Ä–æ–∏—Å—Ö–æ–∂–¥–µ–Ω–∏–∏ –∏ –∏—Å—Ç–æ—Ä–∏–∏ —Ä–∞—Å—Ç–µ–Ω–∏—è';
  if (userState.lastIdentifiedPlant) {
    userPrompt = `–†–∞—Å—Å–∫–∞–∂–∏ –æ –ø—Ä–æ–∏—Å—Ö–æ–∂–¥–µ–Ω–∏–∏ –∏ –∏—Å—Ç–æ—Ä–∏–∏ —Ä–∞—Å—Ç–µ–Ω–∏—è ${userState.lastIdentifiedPlant}`;
  }
  
  const response = await callGeminiAPI(userState, systemPrompt, userPrompt);
  await ctx.reply(response, { parse_mode: 'HTML' });
});

bot.action('watering', async (ctx) => {
  await ctx.answerCbQuery();
  const userId = ctx.from.id;
  const userState = getUserState(userId);
  
  await ctx.reply('–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –ø–æ–ª–∏–≤—É:');
  
  const systemPrompt = '–î–∞–π –¥–µ—Ç–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –ø–æ–ª–∏–≤—É —ç—Ç–æ–≥–æ —Ä–∞—Å—Ç–µ–Ω–∏—è: —á–∞—Å—Ç–æ—Ç–∞, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–¥—ã, –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ –≤ —Ä–∞–∑–Ω—ã–µ —Å–µ–∑–æ–Ω—ã.';
  
  let userPrompt = '–î–∞–π –ø–æ–¥—Ä–æ–±–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –ø–æ–ª–∏–≤—É —Ä–∞—Å—Ç–µ–Ω–∏—è';
  if (userState.lastIdentifiedPlant) {
    userPrompt = `–î–∞–π –ø–æ–¥—Ä–æ–±–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –ø–æ–ª–∏–≤—É —Ä–∞—Å—Ç–µ–Ω–∏—è ${userState.lastIdentifiedPlant}`;
  }
  
  const response = await callGeminiAPI(userState, systemPrompt, userPrompt);
  await ctx.reply(response, { parse_mode: 'HTML' });
});

bot.action('light', async (ctx) => {
  await ctx.answerCbQuery();
  const userId = ctx.from.id;
  const userState = getUserState(userId);
  
  await ctx.reply('–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –æ—Å–≤–µ—â–µ–Ω–∏—é:');
  
  const systemPrompt = '–û–ø–∏—à–∏ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –æ—Å–≤–µ—â–µ–Ω–∏—é –¥–ª—è —ç—Ç–æ–≥–æ —Ä–∞—Å—Ç–µ–Ω–∏—è: –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å —Å–≤–µ—Ç–∞, —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –æ–∫–æ–Ω.';
  
  let userPrompt = '–†–∞—Å—Å–∫–∞–∂–∏ –æ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è—Ö –∫ –æ—Å–≤–µ—â–µ–Ω–∏—é –¥–ª—è —Ä–∞—Å—Ç–µ–Ω–∏—è';
  if (userState.lastIdentifiedPlant) {
    userPrompt = `–†–∞—Å—Å–∫–∞–∂–∏ –æ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è—Ö –∫ –æ—Å–≤–µ—â–µ–Ω–∏—é –¥–ª—è —Ä–∞—Å—Ç–µ–Ω–∏—è ${userState.lastIdentifiedPlant}`;
  }
  
  const response = await callGeminiAPI(userState, systemPrompt, userPrompt);
  await ctx.reply(response, { parse_mode: 'HTML' });
});

bot.action('temp', async (ctx) => {
  await ctx.answerCbQuery();
  const userId = ctx.from.id;
  const userState = getUserState(userId);
  
  await ctx.reply('–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–Ω—ã–π —Ä–µ–∂–∏–º:');
  
  const systemPrompt = '–†–∞—Å—Å–∫–∞–∂–∏ –æ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–Ω–æ–º —Ä–µ–∂–∏–º–µ –¥–ª—è —ç—Ç–æ–≥–æ —Ä–∞—Å—Ç–µ–Ω–∏—è: –æ–ø—Ç–∏–º–∞–ª—å–Ω–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –¥–Ω–µ–º –∏ –Ω–æ—á—å—é, –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–æ–ø—É—Å—Ç–∏–º–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞.';
  
  let userPrompt = '–†–∞—Å—Å–∫–∞–∂–∏ –æ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–Ω–æ–º —Ä–µ–∂–∏–º–µ –¥–ª—è —Ä–∞—Å—Ç–µ–Ω–∏—è';
  if (userState.lastIdentifiedPlant) {
    userPrompt = `–†–∞—Å—Å–∫–∞–∂–∏ –æ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–Ω–æ–º —Ä–µ–∂–∏–º–µ –¥–ª—è —Ä–∞—Å—Ç–µ–Ω–∏—è ${userState.lastIdentifiedPlant}`;
  }
  
  const response = await callGeminiAPI(userState, systemPrompt, userPrompt);
  await ctx.reply(response, { parse_mode: 'HTML' });
});

bot.action('info', async (ctx) => {
  await ctx.answerCbQuery();
  const userId = ctx.from.id;
  const userState = getUserState(userId);
  
  await ctx.reply('–ü–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–∞—Å—Ç–µ–Ω–∏–∏:');
  
  const systemPrompt = '–ü—Ä–µ–¥–æ—Å—Ç–∞–≤—å –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–∞—Å—Ç–µ–Ω–∏–∏: –µ–≥–æ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏, –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ —Ñ–∞–∫—Ç—ã, —Å–ª–æ–∂–Ω–æ—Å—Ç—å —É—Ö–æ–¥–∞ –∏ –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ.';
  
  let userPrompt = '–†–∞—Å—Å–∫–∞–∂–∏ –ø–æ–¥—Ä–æ–±–Ω–æ –æ —Ä–∞—Å—Ç–µ–Ω–∏–∏';
  if (userState.lastIdentifiedPlant) {
    userPrompt = `–†–∞—Å—Å–∫–∞–∂–∏ –ø–æ–¥—Ä–æ–±–Ω–æ –æ —Ä–∞—Å—Ç–µ–Ω–∏–∏ ${userState.lastIdentifiedPlant}`;
  }
  
  const response = await callGeminiAPI(userState, systemPrompt, userPrompt);
  await ctx.reply(response, { parse_mode: 'HTML' });
});

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ webhook –¥–ª—è Telegram
app.use(express.json());
app.use(bot.webhookCallback('/api/webhook'));

// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏
app.get('/api/health', (req, res) => {
  res.status(200).send('OK');
});

// –ö–æ—Ä–Ω–µ–≤–æ–π –º–∞—Ä—à—Ä—É—Ç
app.get('/', (req, res) => {
  res.status(200).send('Telegram Bot is running');
});

// –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤–µ–±—Ö—É–∫–∞
bot.telegram.setWebhook('https://plexy-2.vercel.app/api/webhook')
  .then(() => {
    console.log('Webhook set successfully');
  })
  .catch(err => {
    console.error('Error setting webhook:', err);
  });

// –≠–∫—Å–ø–æ—Ä—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –¥–ª—è Vercel
module.exports = app; 