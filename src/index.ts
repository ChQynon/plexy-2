import { Telegraf, Scenes, session, Markup } from 'telegraf';
import dotenv from 'dotenv';
import { vitaminsModule } from './modules/vitamins';
import { plantsModule } from './modules/plants';
import { plantIdentificationModule } from './modules/plantIdentification';
import { helpCommand } from './commands/help';
import { startCommand } from './commands/start';
import * as fs from 'fs';
import * as path from 'path';
import axios from 'axios';
import express from 'express';

// Load environment variables
dotenv.config();

// Initialize bot
const bot = new Telegraf(process.env.TELEGRAM_BOT_TOKEN!);

// Create temp directory for image storage if it doesn't exist
const tempDir = path.join(__dirname, '../temp');
if (!fs.existsSync(tempDir)) {
  fs.mkdirSync(tempDir, { recursive: true });
}

// Setup for webhook (Vercel deployment)
const PORT = process.env.PORT ? parseInt(process.env.PORT) : 3000;
const WEBHOOK_URL = process.env.WEBHOOK_URL || '';
const DEVELOPMENT = process.env.NODE_ENV !== 'production';

// Conversation history for each user
interface MessageHistory {
  role: string;
  content: string | any[];
}

// User states for FSM-like behavior
interface UserState {
  lastPlantData: any;
  lastVitaminData: any;
  lastMessage: string | null;
  lastImageUrl: string | null;
  lastImageBase64: string | null;
  lastPlantName: string | null;
  lastActionTime: number;
  sessionStart: Date;
  messageCount: number;
  currentState: string | null;
  conversationHistory: MessageHistory[];
  lastIdentifiedPlant: string | null;
}

const userStates: Record<number, UserState> = {};

// Get or create user state
function getUserState(userId: number): UserState {
  if (!userStates[userId]) {
    userStates[userId] = {
      lastPlantData: null,
      lastVitaminData: null,
      lastMessage: null,
      lastImageUrl: null,
      lastImageBase64: null,
      lastPlantName: null,
      lastActionTime: 0,
      sessionStart: new Date(),
      messageCount: 0,
      currentState: null,
      conversationHistory: [],
      lastIdentifiedPlant: null
    };
  }
  return userStates[userId];
}

// Gemini API call function
async function callGeminiAPI(userState: UserState, systemPrompt: string, userPrompt: string | any[], addToHistory: boolean = true): Promise<string> {
  try {
    const GEMINI_API_KEY = process.env.GEMINI_API_KEY || "AIzaSyA3WOrYYhw6FnePJX3EANcmwH6OvkZW9IE";
    
    // Import the GoogleGenAI library
    const { GoogleGenAI } = require('@google/genai');
    
    // Initialize the API client
    const genAI = new GoogleGenAI(GEMINI_API_KEY);
    
    // Create a conversation
    const model = genAI.getGenerativeModel({ model: "gemini-2.0-flash-thinking-exp-01-21" });
    
    // Prepare the prompt
    const prompt = `–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –¥–ª—è —Ç–µ–±—è: ${systemPrompt}. –û—Ç–≤–µ—á–∞–π –ø–æ-—Ä—É—Å—Å–∫–∏, –±–µ–∑ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–π –∏ —É–ø–æ–º–∏–Ω–∞–Ω–∏–π, —á—Ç–æ —Ç—ã PLEXY –æ—Ç Plexy Lab. –ü—Ä–æ—Å—Ç–æ –¥–∞–≤–∞–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –±–µ–∑ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–π.`;
    
    // Prepare the chat
    const chat = model.startChat({
      history: userState.conversationHistory.map(msg => ({
        role: msg.role,
        parts: [{ text: typeof msg.content === 'string' ? msg.content : JSON.stringify(msg.content) }]
      })).slice(-5)
    });
    
    // Generate content
    const result = await chat.sendMessage(Array.isArray(userPrompt) 
      ? [{ text: prompt }, ...userPrompt]
      : [{ text: prompt }, { text: userPrompt }]
    );
    
    // Extract the response text
    let content = result.response.text();
    
    // Add to conversation history if required
    if (addToHistory) {
      // Add user prompt to history
      if (typeof userPrompt === 'string') {
        userState.conversationHistory.push({
          role: 'user',
          content: userPrompt
        });
      }
      
      // Add bot response to history
      userState.conversationHistory.push({
        role: 'model',
        content: content
      });
      
      // Limit history length
      if (userState.conversationHistory.length > 10) {
        userState.conversationHistory = userState.conversationHistory.slice(-10);
      }
    }
    
    // Process the text to handle formatting
    content = content.replace(/\*\*(.*?)\*\*/g, "<b>$1</b>");  // Bold
    content = content.replace(/\*(.*?)\*/g, "<i>$1</i>");      // Italic
    content = content.replace(/__(.*?)__/g, "<u>$1</u>");      // Underline
    content = content.replace(/```(.*?)```/gs, "<pre>$1</pre>"); // Code blocks
    content = content.replace(/`(.*?)`/g, "<code>$1</code>");  // Inline code
    content = content.replace(/#{1,6} (.*?)(?:\n|$)/g, "<b>$1</b>\n"); // Headers
    
    // Remove any ID references
    content = content.replace(/\b[iI][dD][ _]?\d+\b/g, '');
    content = content.replace(/\b—Å ID.*?\b/g, '');
    content = content.replace(/\b—Å –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–º.*?\b/g, '');
    
    // Remove self-introductions
    content = content.replace(/–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ!?\s*(–Ø)?\s*PLEXY[,\s]+(—ç–∫—Å–ø–µ—Ä—Ç|–ø–æ–º–æ—â–Ω–∏–∫|–±–æ—Ç|—Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç).*Plexy Lab[.,]?/gi, '');
    content = content.replace(/PLEXY[,\s]+(—ç–∫—Å–ø–µ—Ä—Ç|–ø–æ–º–æ—â–Ω–∏–∫|–±–æ—Ç|—Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç).*Plexy Lab[,.]?/gi, '');
    content = content.replace(/–Ø\s*‚Äî\s*PLEXY[,\s]+(—ç–∫—Å–ø–µ—Ä—Ç|–ø–æ–º–æ—â–Ω–∏–∫|–±–æ—Ç|—Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç).*Plexy Lab[.,]?/gi, '');
    
    return content;
  } catch (error) {
    console.error("Error calling Gemini API:", error);
    return "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—Ç–≤–µ—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.";
  }
}

// Set up middleware
bot.use(session());

// Register commands
bot.command('start', startCommand);
bot.command('help', helpCommand);

// Create inline keyboards
const createPlantActionKeyboard = () => {
  return Markup.inlineKeyboard([
    [
      Markup.button.callback('üåø –°–æ–≤–µ—Ç—ã –ø–æ —É—Ö–æ–¥—É', 'care'),
      Markup.button.callback('‚ùó –ü—Ä–æ–±–ª–µ–º—ã', 'problems')
    ],
    [
      Markup.button.callback('üíä –í–∏—Ç–∞–º–∏–Ω—ã', 'vitamins'),
      Markup.button.callback('üåç –ü—Ä–æ–∏—Å—Ö–æ–∂–¥–µ–Ω–∏–µ', 'origin')
    ],
    [
      Markup.button.callback('üíß –ü–æ–ª–∏–≤', 'watering'),
      Markup.button.callback('‚òÄÔ∏è –û—Å–≤–µ—â–µ–Ω–∏–µ', 'light')
    ],
    [
      Markup.button.callback('üå°Ô∏è –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞', 'temp'),
      Markup.button.callback('üìö –ü–æ–¥—Ä–æ–±–Ω–µ–µ', 'info')
    ]
  ]);
};

// Main menu keyboard
const mainMenuKeyboard = () => {
  return Markup.keyboard([
    ['üå± –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ä–∞—Å—Ç–µ–Ω–∏–µ', 'üîç –ü—Ä–æ–±–ª–µ–º–∞ —Å —Ä–∞—Å—Ç–µ–Ω–∏–µ–º'],
    ['üíä –í–∏—Ç–∞–º–∏–Ω—ã –∏ –ø–∏—Ç–∞–Ω–∏–µ', '‚ùì –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å'],
    ['‚ÑπÔ∏è –ü–æ–º–æ—â—å', 'üìù –û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤']
  ]).resize();
};

// Register modules
bot.use(vitaminsModule);
bot.use(plantsModule);
bot.use(plantIdentificationModule);

// Handle menu button clicks
bot.hears('üå± –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ä–∞—Å—Ç–µ–Ω–∏–µ', (ctx) => {
  const userState = getUserState(ctx.from!.id);
  userState.currentState = 'waiting_for_photo';
  
  ctx.reply(
    '–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ —Ä–∞—Å—Ç–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å',
    Markup.keyboard([['¬´ –ù–∞–∑–∞–¥']]).resize()
  );
});

bot.hears('üîç –ü—Ä–æ–±–ª–µ–º–∞ —Å —Ä–∞—Å—Ç–µ–Ω–∏–µ–º', (ctx) => {
  const userState = getUserState(ctx.from!.id);
  userState.currentState = 'waiting_for_problem_description';
  
  ctx.reply(
    '–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ —Ä–∞—Å—Ç–µ–Ω–∏—è —Å –ø—Ä–æ–±–ª–µ–º–æ–π –∏ –Ω–∞–ø–∏—à–∏—Ç–µ –∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã –≤ –ø–æ–¥–ø–∏—Å–∏ –∫ —Ñ–æ—Ç–æ',
    Markup.keyboard([['¬´ –ù–∞–∑–∞–¥']]).resize()
  );
});

bot.hears('üíä –í–∏—Ç–∞–º–∏–Ω—ã –∏ –ø–∏—Ç–∞–Ω–∏–µ', (ctx) => {
  ctx.reply(
    '–†–∞–∑–¥–µ–ª –æ –≤–∏—Ç–∞–º–∏–Ω–∞—Ö –∏ –ø–∏—Ç–∞–Ω–∏–∏',
    Markup.keyboard([
      ['üíä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–∏—Ç–∞–º–∏–Ω–∞—Ö', 'ü•ó –ó–¥–æ—Ä–æ–≤–æ–µ –ø–∏—Ç–∞–Ω–∏–µ'],
      ['ü©∫ –°–∏–º–ø—Ç–æ–º—ã –∞–≤–∏—Ç–∞–º–∏–Ω–æ–∑–∞', 'üí° –°–æ–≤–µ—Ç—ã –ø–æ –ø–∏—Ç–∞–Ω–∏—é'],
      ['¬´ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é']
    ]).resize()
  );
});

bot.hears('‚ùì –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å', (ctx) => {
  const userState = getUserState(ctx.from!.id);
  userState.currentState = 'waiting_for_question';
  
  ctx.reply(
    '–ó–∞–¥–∞–π—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å –æ —Ä–∞—Å—Ç–µ–Ω–∏—è—Ö, –≤–∏—Ç–∞–º–∏–Ω–∞—Ö –∏–ª–∏ –ø–∏—Ç–∞–Ω–∏–∏',
    Markup.keyboard([['¬´ –ù–∞–∑–∞–¥']]).resize()
  );
});

bot.hears('‚ÑπÔ∏è –ü–æ–º–æ—â—å', helpCommand);

bot.hears('üìù –û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤', (ctx) => {
  const userState = getUserState(ctx.from!.id);
  userState.currentState = 'waiting_for_feedback';
  
  ctx.reply(
    '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –æ—Ç–∑—ã–≤ –∏–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –ø–æ —É–ª—É—á—à–µ–Ω–∏—é –±–æ—Ç–∞',
    Markup.keyboard([['¬´ –ù–∞–∑–∞–¥']]).resize()
  );
});

bot.hears('¬´ –ù–∞–∑–∞–¥', (ctx) => {
  const userState = getUserState(ctx.from!.id);
  userState.currentState = null;
  
  ctx.reply(
    '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é',
    mainMenuKeyboard()
  );
});

bot.hears('¬´ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', (ctx) => {
  const userState = getUserState(ctx.from!.id);
  userState.currentState = null;
  
  ctx.reply(
    '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é',
    mainMenuKeyboard()
  );
});

// Handle vitamins and nutrition button clicks
bot.hears('üíä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–∏—Ç–∞–º–∏–Ω–∞—Ö', async (ctx) => {
  const userId = ctx.from!.id;
  const userState = getUserState(userId);
  
  const processingMessage = await ctx.reply('–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤–∏—Ç–∞–º–∏–Ω–∞—Ö...');
  
  const systemPrompt = '–ü—Ä–µ–¥–æ—Å—Ç–∞–≤—å –∫—Ä–∞—Ç–∫—É—é, –Ω–æ –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∏—Ç–∞–º–∏–Ω–∞—Ö, –∏—Ö —Ñ—É–Ω–∫—Ü–∏—è—Ö –≤ –æ—Ä–≥–∞–Ω–∏–∑–º–µ, —Å—É—Ç–æ—á–Ω–æ–π –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–∏ –∏ –≤ –∫–∞–∫–∏—Ö –ø—Ä–æ–¥—É–∫—Ç–∞—Ö –æ–Ω–∏ —Å–æ–¥–µ—Ä–∂–∞—Ç—Å—è. –°–æ—Å—Ç–∞–≤—å —Å–ø–∏—Å–æ–∫ –æ—Å–Ω–æ–≤–Ω—ã—Ö –≤–∏—Ç–∞–º–∏–Ω–æ–≤ (A, –≥—Ä—É–ø–ø–∞ B, C, D, E, K) —Å –∫—Ä–∞—Ç–∫–∏–º –æ–ø–∏—Å–∞–Ω–∏–µ–º.';
  
  const response = await callGeminiAPI(userState, systemPrompt, '–†–∞—Å—Å–∫–∞–∂–∏ –æ –≤–∏—Ç–∞–º–∏–Ω–∞—Ö, –∏—Ö —Ñ—É–Ω–∫—Ü–∏—è—Ö –∏ –ø–æ–ª—å–∑–µ');
  
  await ctx.telegram.editMessageText(
    ctx.chat!.id,
    processingMessage.message_id,
    undefined,
    response,
    { parse_mode: 'HTML' }
  );
});

bot.hears('ü•ó –ó–¥–æ—Ä–æ–≤–æ–µ –ø–∏—Ç–∞–Ω–∏–µ', async (ctx) => {
  const userId = ctx.from!.id;
  const userState = getUserState(userId);
  
  const processingMessage = await ctx.reply('–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–¥–æ—Ä–æ–≤–æ–º –ø–∏—Ç–∞–Ω–∏–∏...');
  
  const systemPrompt = '–ü—Ä–µ–¥–æ—Å—Ç–∞–≤—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–∏–Ω—Ü–∏–ø–∞—Ö –∑–¥–æ—Ä–æ–≤–æ–≥–æ –ø–∏—Ç–∞–Ω–∏—è, –±–∞–ª–∞–Ω—Å–µ –ø–∏—Ç–∞—Ç–µ–ª—å–Ω—ã—Ö –≤–µ—â–µ—Å—Ç–≤, —Ä–µ–∂–∏–º–µ –ø–∏—Ç–∞–Ω–∏—è –∏ –ø–æ–ª–µ–∑–Ω—ã—Ö –ø—Ä–∏–≤—ã—á–∫–∞—Ö. –î–æ–±–∞–≤—å –ø—Ä–∏–º–µ—Ä—ã –∑–¥–æ—Ä–æ–≤—ã—Ö –±–ª—é–¥.';
  
  const response = await callGeminiAPI(userState, systemPrompt, '–†–∞—Å—Å–∫–∞–∂–∏ –æ –ø—Ä–∏–Ω—Ü–∏–ø–∞—Ö –∑–¥–æ—Ä–æ–≤–æ–≥–æ –ø–∏—Ç–∞–Ω–∏—è');
  
  await ctx.telegram.editMessageText(
    ctx.chat!.id,
    processingMessage.message_id,
    undefined,
    response,
    { parse_mode: 'HTML' }
  );
});

bot.hears('ü©∫ –°–∏–º–ø—Ç–æ–º—ã –∞–≤–∏—Ç–∞–º–∏–Ω–æ–∑–∞', async (ctx) => {
  const userId = ctx.from!.id;
  const userState = getUserState(userId);
  
  const processingMessage = await ctx.reply('–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–∏–º–ø—Ç–æ–º–∞—Ö –∞–≤–∏—Ç–∞–º–∏–Ω–æ–∑–∞...');
  
  const systemPrompt = '–û–ø–∏—à–∏ –æ—Å–Ω–æ–≤–Ω—ã–µ —Å–∏–º–ø—Ç–æ–º—ã –Ω–µ—Ö–≤–∞—Ç–∫–∏ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –≤–∏—Ç–∞–º–∏–Ω–æ–≤ –∏ –º–∏–Ω–µ—Ä–∞–ª–æ–≤ –≤ –æ—Ä–≥–∞–Ω–∏–∑–º–µ, –Ω–∞ –∫–∞–∫–∏–µ –ø—Ä–∏–∑–Ω–∞–∫–∏ —Å—Ç–æ–∏—Ç –æ–±—Ä–∞—Ç–∏—Ç—å –≤–Ω–∏–º–∞–Ω–∏–µ –∏ –∫–∞–∫ –≤–æ—Å–ø–æ–ª–Ω–∏—Ç—å –¥–µ—Ñ–∏—Ü–∏—Ç –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–º –ø—É—Ç–µ–º.';
  
  const response = await callGeminiAPI(userState, systemPrompt, '–†–∞—Å—Å–∫–∞–∂–∏ –æ —Å–∏–º–ø—Ç–æ–º–∞—Ö –∞–≤–∏—Ç–∞–º–∏–Ω–æ–∑–∞');
  
  await ctx.telegram.editMessageText(
    ctx.chat!.id,
    processingMessage.message_id,
    undefined,
    response,
    { parse_mode: 'HTML' }
  );
});

bot.hears('üí° –°–æ–≤–µ—Ç—ã –ø–æ –ø–∏—Ç–∞–Ω–∏—é', async (ctx) => {
  const userId = ctx.from!.id;
  const userState = getUserState(userId);
  
  const processingMessage = await ctx.reply('–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Å–æ–≤–µ—Ç–æ–≤ –ø–æ –ø–∏—Ç–∞–Ω–∏—é...');
  
  const systemPrompt = '–î–∞–π –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ —Å–æ–≤–µ—Ç—ã –ø–æ —É–ª—É—á—à–µ–Ω–∏—é —Ä–∞—Ü–∏–æ–Ω–∞ –ø–∏—Ç–∞–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –ª–µ–≥–∫–æ –≤–Ω–µ–¥—Ä–∏—Ç—å –≤ –ø–æ–≤—Å–µ–¥–Ω–µ–≤–Ω—É—é –∂–∏–∑–Ω—å. –ü—Ä–µ–¥–ª–æ–∂–∏ —Å–ø–∏—Å–æ–∫ –ø–æ–ª–µ–∑–Ω—ã—Ö –ø–µ—Ä–µ–∫—É—Å–æ–≤, —Å–ø–æ—Å–æ–±—ã –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è –∑–¥–æ—Ä–æ–≤–æ–π –ø–∏—â–∏ –∏ –∫–∞–∫ —Å–¥–µ–ª–∞—Ç—å –ø–∏—Ç–∞–Ω–∏–µ –±–æ–ª–µ–µ —Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–º.';
  
  const response = await callGeminiAPI(userState, systemPrompt, '–î–∞–π –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ —Å–æ–≤–µ—Ç—ã –ø–æ —É–ª—É—á—à–µ–Ω–∏—é –ø–∏—Ç–∞–Ω–∏—è');
  
  await ctx.telegram.editMessageText(
    ctx.chat!.id,
    processingMessage.message_id,
    undefined,
    response,
    { parse_mode: 'HTML' }
  );
});

// Handle callback queries from inline buttons
bot.action('care', async (ctx) => {
  await ctx.answerCbQuery();
  const userId = ctx.from!.id;
  const userState = getUserState(userId);
  
  await ctx.reply('–°–æ–≤–µ—Ç—ã –ø–æ —É—Ö–æ–¥—É –∑–∞ —Ä–∞—Å—Ç–µ–Ω–∏–µ–º:');
  
  const systemPrompt = '–î–∞–π –∫—Ä–∞—Ç–∫–∏–µ –∏ –ø–æ–ª–µ–∑–Ω—ã–µ —Å–æ–≤–µ—Ç—ã –ø–æ —É—Ö–æ–¥—É –∑–∞ —Ä–∞—Å—Ç–µ–Ω–∏–µ–º (–ø–æ–ª–∏–≤, –æ—Å–≤–µ—â–µ–Ω–∏–µ, —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞, –≤–ª–∞–∂–Ω–æ—Å—Ç—å, –≥—Ä—É–Ω—Ç –∏ –ø–æ–¥–∫–æ—Ä–º–∫–∞). –ò—Å–ø–æ–ª—å–∑—É–π —á–µ—Ç–∫–∏–µ —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫–∏. –û—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∫—Ä–∞—Ç–∫–∏–º –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–º. –ù–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–π—Å—è –∏ –Ω–µ —É–ø–æ–º–∏–Ω–∞–π Plexy –∏–ª–∏ Plexy Lab.';
  
  let userPrompt = '–î–∞–π —Å–æ–≤–µ—Ç—ã –ø–æ —É—Ö–æ–¥—É –∑–∞ —Ä–∞—Å—Ç–µ–Ω–∏–µ–º';
  if (userState.lastIdentifiedPlant) {
    userPrompt = `–î–∞–π –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Å–æ–≤–µ—Ç—ã –ø–æ —É—Ö–æ–¥—É –∑–∞ —Ä–∞—Å—Ç–µ–Ω–∏–µ–º ${userState.lastIdentifiedPlant}, –æ—Å–Ω–æ–≤—ã–≤–∞—è—Å—å –Ω–∞ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç—è—Ö –∏–º–µ–Ω–Ω–æ —ç—Ç–æ–≥–æ –≤–∏–¥–∞`;
  }
  
  const response = await callGeminiAPI(userState, systemPrompt, userPrompt);
  await ctx.reply(response, { parse_mode: 'HTML' });
});

bot.action('problems', async (ctx) => {
  await ctx.answerCbQuery();
  const userId = ctx.from!.id;
  const userState = getUserState(userId);
  
  await ctx.reply('–¢–∏–ø–∏—á–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã —Ä–∞—Å—Ç–µ–Ω–∏—è:');
  
  const systemPrompt = '–û–ø–∏—à–∏ 3-5 –Ω–∞–∏–±–æ–ª–µ–µ —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –ø—Ä–æ–±–ª–µ–º —Å —ç—Ç–∏–º —Ä–∞—Å—Ç–µ–Ω–∏–µ–º, –∏—Ö –ø—Ä–∏–∑–Ω–∞–∫–∏ –∏ —Å–ø–æ—Å–æ–±—ã —Ä–µ—à–µ–Ω–∏—è. –ò—Å–ø–æ–ª—å–∑—É–π —á–µ—Ç–∫–∏–µ —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫–∏. –ù–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–π—Å—è –∏ –Ω–µ —É–ø–æ–º–∏–Ω–∞–π Plexy –∏–ª–∏ Plexy Lab.';
  
  let userPrompt = '–û–ø–∏—à–∏ —Ç–∏–ø–∏—á–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã —Ä–∞—Å—Ç–µ–Ω–∏—è';
  if (userState.lastIdentifiedPlant) {
    userPrompt = `–û–ø–∏—à–∏ —Ç–∏–ø–∏—á–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã –∏–º–µ–Ω–Ω–æ –¥–ª—è ${userState.lastIdentifiedPlant}, —Å —á–µ–º —á–∞—Å—Ç–æ —Å—Ç–∞–ª–∫–∏–≤–∞—é—Ç—Å—è –≤–ª–∞–¥–µ–ª—å—Ü—ã —ç—Ç–æ–≥–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –≤–∏–¥–∞`;
  }
  
  const response = await callGeminiAPI(userState, systemPrompt, userPrompt);
  await ctx.reply(response, { parse_mode: 'HTML' });
});

bot.action('vitamins', async (ctx) => {
  await ctx.answerCbQuery();
  const userId = ctx.from!.id;
  const userState = getUserState(userId);
  
  await ctx.reply('–ù–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –≤–∏—Ç–∞–º–∏–Ω—ã –∏ –º–∏–∫—Ä–æ—ç–ª–µ–º–µ–Ω—Ç—ã:');
  
  const systemPrompt = '–¢—ã ‚Äî PLEXY, —ç–∫—Å–ø–µ—Ä—Ç –ø–æ —Ä–∞—Å—Ç–µ–Ω–∏—è–º –æ—Ç Plexy Lab. –†–∞—Å—Å–∫–∞–∂–∏ –æ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–ª—è —ç—Ç–æ–≥–æ —Ä–∞—Å—Ç–µ–Ω–∏—è –≤–∏—Ç–∞–º–∏–Ω–∞—Ö –∏ –º–∏–∫—Ä–æ—ç–ª–µ–º–µ–Ω—Ç–∞—Ö. –£–∫–∞–∂–∏ –ø—Ä–∏–∑–Ω–∞–∫–∏ –∏—Ö –Ω–µ–¥–æ—Å—Ç–∞—Ç–∫–∞ –∏ —Å–ø–æ—Å–æ–±—ã –ø–æ–¥–∫–æ—Ä–º–∫–∏, –≤–∫–ª—é—á–∞—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –±—ã—Ç–æ–≤—ã—Ö –æ—Ç—Ö–æ–¥–æ–≤.';
  
  let userPrompt = '–†–∞—Å—Å–∫–∞–∂–∏ –æ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –≤–∏—Ç–∞–º–∏–Ω–∞—Ö –∏ –º–∏–∫—Ä–æ—ç–ª–µ–º–µ–Ω—Ç–∞—Ö –¥–ª—è —Ä–∞—Å—Ç–µ–Ω–∏—è';
  if (userState.lastIdentifiedPlant) {
    userPrompt = `–†–∞—Å—Å–∫–∞–∂–∏ –æ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –≤–∏—Ç–∞–º–∏–Ω–∞—Ö –∏ –º–∏–∫—Ä–æ—ç–ª–µ–º–µ–Ω—Ç–∞—Ö –¥–ª—è —Ä–∞—Å—Ç–µ–Ω–∏—è ${userState.lastIdentifiedPlant}`;
  }
  
  const response = await callGeminiAPI(userState, systemPrompt, userPrompt);
  await ctx.reply(response, { parse_mode: 'HTML' });
});

bot.action('origin', async (ctx) => {
  await ctx.answerCbQuery();
  const userId = ctx.from!.id;
  const userState = getUserState(userId);
  
  await ctx.reply('–ü—Ä–æ–∏—Å—Ö–æ–∂–¥–µ–Ω–∏–µ –∏ –∏—Å—Ç–æ—Ä–∏—è —Ä–∞—Å—Ç–µ–Ω–∏—è:');
  
  const systemPrompt = '–¢—ã ‚Äî PLEXY, —ç–∫—Å–ø–µ—Ä—Ç –ø–æ —Ä–∞—Å—Ç–µ–Ω–∏—è–º –æ—Ç Plexy Lab. –†–∞—Å—Å–∫–∞–∂–∏ –æ–± –∏—Å—Ç–æ—Ä–∏–∏, –ø—Ä–æ–∏—Å—Ö–æ–∂–¥–µ–Ω–∏–∏ –∏ —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–µ–Ω–∏–∏ —ç—Ç–æ–≥–æ —Ä–∞—Å—Ç–µ–Ω–∏—è. –í–∫–ª—é—á–∏ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ —Ñ–∞–∫—Ç—ã –æ —Ç–æ–º, –æ—Ç–∫—É–¥–∞ –æ–Ω–æ —Ä–æ–¥–æ–º –∏ –∫–∞–∫ –ø–æ–ø–∞–ª–æ –≤ –∫–æ–º–Ω–∞—Ç–Ω—É—é –∫—É–ª—å—Ç—É—Ä—É.';
  
  let userPrompt = '–†–∞—Å—Å–∫–∞–∂–∏ –æ –ø—Ä–æ–∏—Å—Ö–æ–∂–¥–µ–Ω–∏–∏ –∏ –∏—Å—Ç–æ—Ä–∏–∏ —Ä–∞—Å—Ç–µ–Ω–∏—è';
  if (userState.lastIdentifiedPlant) {
    userPrompt = `–†–∞—Å—Å–∫–∞–∂–∏ –æ –ø—Ä–æ–∏—Å—Ö–æ–∂–¥–µ–Ω–∏–∏ –∏ –∏—Å—Ç–æ—Ä–∏–∏ —Ä–∞—Å—Ç–µ–Ω–∏—è ${userState.lastIdentifiedPlant}`;
  }
  
  const response = await callGeminiAPI(userState, systemPrompt, userPrompt);
  await ctx.reply(response, { parse_mode: 'HTML' });
});

bot.action('watering', async (ctx) => {
  await ctx.answerCbQuery();
  const userId = ctx.from!.id;
  const userState = getUserState(userId);
  
  await ctx.reply('–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –ø–æ–ª–∏–≤—É:');
  
  const systemPrompt = '–¢—ã ‚Äî PLEXY, —ç–∫—Å–ø–µ—Ä—Ç –ø–æ —Ä–∞—Å—Ç–µ–Ω–∏—è–º –æ—Ç Plexy Lab. –î–∞–π –¥–µ—Ç–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –ø–æ–ª–∏–≤—É —ç—Ç–æ–≥–æ —Ä–∞—Å—Ç–µ–Ω–∏—è: —á–∞—Å—Ç–æ—Ç–∞, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–¥—ã, –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ –≤ —Ä–∞–∑–Ω—ã–µ —Å–µ–∑–æ–Ω—ã, –ø—Ä–∏–∑–Ω–∞–∫–∏ –Ω–µ–¥–æ—Å—Ç–∞—Ç–∫–∞ –∏ –ø–µ—Ä–µ–∏–∑–±—ã—Ç–∫–∞ –≤–ª–∞–≥–∏.';
  
  let userPrompt = '–î–∞–π –ø–æ–¥—Ä–æ–±–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –ø–æ–ª–∏–≤—É —Ä–∞—Å—Ç–µ–Ω–∏—è';
  if (userState.lastIdentifiedPlant) {
    userPrompt = `–î–∞–π –ø–æ–¥—Ä–æ–±–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –ø–æ–ª–∏–≤—É —Ä–∞—Å—Ç–µ–Ω–∏—è ${userState.lastIdentifiedPlant}`;
  }
  
  const response = await callGeminiAPI(userState, systemPrompt, userPrompt);
  await ctx.reply(response, { parse_mode: 'HTML' });
});

bot.action('light', async (ctx) => {
  await ctx.answerCbQuery();
  const userId = ctx.from!.id;
  const userState = getUserState(userId);
  
  await ctx.reply('–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –æ—Å–≤–µ—â–µ–Ω–∏—é:');
  
  const systemPrompt = '–¢—ã ‚Äî PLEXY, —ç–∫—Å–ø–µ—Ä—Ç –ø–æ —Ä–∞—Å—Ç–µ–Ω–∏—è–º –æ—Ç Plexy Lab. –û–ø–∏—à–∏ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –æ—Å–≤–µ—â–µ–Ω–∏—é –¥–ª—è —ç—Ç–æ–≥–æ —Ä–∞—Å—Ç–µ–Ω–∏—è: –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å —Å–≤–µ—Ç–∞, —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –æ–∫–æ–Ω, –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç—å –≤ –∑–∞—â–∏—Ç–µ –æ—Ç –ø—Ä—è–º—ã—Ö –ª—É—á–µ–π, –ø—Ä–∏–∑–Ω–∞–∫–∏ –Ω–µ–¥–æ—Å—Ç–∞—Ç–∫–∞ –∏ –∏–∑–±—ã—Ç–∫–∞ —Å–≤–µ—Ç–∞.';
  
  let userPrompt = '–†–∞—Å—Å–∫–∞–∂–∏ –æ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è—Ö –∫ –æ—Å–≤–µ—â–µ–Ω–∏—é –¥–ª—è —Ä–∞—Å—Ç–µ–Ω–∏—è';
  if (userState.lastIdentifiedPlant) {
    userPrompt = `–†–∞—Å—Å–∫–∞–∂–∏ –æ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è—Ö –∫ –æ—Å–≤–µ—â–µ–Ω–∏—é –¥–ª—è —Ä–∞—Å—Ç–µ–Ω–∏—è ${userState.lastIdentifiedPlant}`;
  }
  
  const response = await callGeminiAPI(userState, systemPrompt, userPrompt);
  await ctx.reply(response, { parse_mode: 'HTML' });
});

bot.action('temp', async (ctx) => {
  await ctx.answerCbQuery();
  const userId = ctx.from!.id;
  const userState = getUserState(userId);
  
  await ctx.reply('–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–Ω—ã–π —Ä–µ–∂–∏–º:');
  
  const systemPrompt = '–¢—ã ‚Äî PLEXY, —ç–∫—Å–ø–µ—Ä—Ç –ø–æ —Ä–∞—Å—Ç–µ–Ω–∏—è–º –æ—Ç Plexy Lab. –†–∞—Å—Å–∫–∞–∂–∏ –æ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–Ω–æ–º —Ä–µ–∂–∏–º–µ –¥–ª—è —ç—Ç–æ–≥–æ —Ä–∞—Å—Ç–µ–Ω–∏—è: –æ–ø—Ç–∏–º–∞–ª—å–Ω–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –¥–Ω–µ–º –∏ –Ω–æ—á—å—é, –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–æ–ø—É—Å—Ç–∏–º–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞, –æ—Ç–Ω–æ—à–µ–Ω–∏–µ –∫ —Å–∫–≤–æ–∑–Ω—è–∫–∞–º –∏ –ø–µ—Ä–µ–ø–∞–¥–∞–º —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä.';
  
  let userPrompt = '–†–∞—Å—Å–∫–∞–∂–∏ –æ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–Ω–æ–º —Ä–µ–∂–∏–º–µ –¥–ª—è —Ä–∞—Å—Ç–µ–Ω–∏—è';
  if (userState.lastIdentifiedPlant) {
    userPrompt = `–†–∞—Å—Å–∫–∞–∂–∏ –æ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–Ω–æ–º —Ä–µ–∂–∏–º–µ –¥–ª—è —Ä–∞—Å—Ç–µ–Ω–∏—è ${userState.lastIdentifiedPlant}`;
  }
  
  const response = await callGeminiAPI(userState, systemPrompt, userPrompt);
  await ctx.reply(response, { parse_mode: 'HTML' });
});

bot.action('info', async (ctx) => {
  await ctx.answerCbQuery();
  const userId = ctx.from!.id;
  const userState = getUserState(userId);
  
  await ctx.reply('–ü–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–∞—Å—Ç–µ–Ω–∏–∏:');
  
  const systemPrompt = '–¢—ã ‚Äî PLEXY, —ç–∫—Å–ø–µ—Ä—Ç –ø–æ —Ä–∞—Å—Ç–µ–Ω–∏—è–º –æ—Ç Plexy Lab. –ü—Ä–µ–¥–æ—Å—Ç–∞–≤—å –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–∞—Å—Ç–µ–Ω–∏–∏: –µ–≥–æ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏, –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ —Ñ–∞–∫—Ç—ã, —Å–ª–æ–∂–Ω–æ—Å—Ç—å —É—Ö–æ–¥–∞ –∏ –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ.';
  
  let userPrompt = '–†–∞—Å—Å–∫–∞–∂–∏ –ø–æ–¥—Ä–æ–±–Ω–æ –æ —Ä–∞—Å—Ç–µ–Ω–∏–∏';
  if (userState.lastIdentifiedPlant) {
    userPrompt = `–†–∞—Å—Å–∫–∞–∂–∏ –ø–æ–¥—Ä–æ–±–Ω–æ –æ —Ä–∞—Å—Ç–µ–Ω–∏–∏ ${userState.lastIdentifiedPlant}`;
  }
  
  const response = await callGeminiAPI(userState, systemPrompt, userPrompt);
  await ctx.reply(response, { parse_mode: 'HTML' });
});

// Handle text messages with AI
bot.on('text', async (ctx) => {
  try {
    const userMessage = ctx.message.text;
    const userId = ctx.from!.id;
    const userState = getUserState(userId);
    
    // Skip processing for button responses and commands
    const buttonResponses = [
      'üå± –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ä–∞—Å—Ç–µ–Ω–∏–µ', 'üîç –ü—Ä–æ–±–ª–µ–º–∞ —Å —Ä–∞—Å—Ç–µ–Ω–∏–µ–º',
      'üíä –í–∏—Ç–∞–º–∏–Ω—ã –∏ –ø–∏—Ç–∞–Ω–∏–µ', '‚ùì –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å',
      '‚ÑπÔ∏è –ü–æ–º–æ—â—å', 'üìù –û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤',
      '¬´ –ù–∞–∑–∞–¥', '¬´ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é',
      'üíä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–∏—Ç–∞–º–∏–Ω–∞—Ö', 'ü•ó –ó–¥–æ—Ä–æ–≤–æ–µ –ø–∏—Ç–∞–Ω–∏–µ',
      'ü©∫ –°–∏–º–ø—Ç–æ–º—ã –∞–≤–∏—Ç–∞–º–∏–Ω–æ–∑–∞', 'üí° –°–æ–≤–µ—Ç—ã –ø–æ –ø–∏—Ç–∞–Ω–∏—é'
    ];
    
    if (buttonResponses.includes(userMessage) || userMessage.startsWith('/')) {
      return;
    }
    
    // Handle feedback
    if (userState.currentState === 'waiting_for_feedback') {
      await ctx.reply('–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –æ—Ç–∑—ã–≤! –ú—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —É—á—Ç–µ–º –≤–∞—à–µ –º–Ω–µ–Ω–∏–µ.');
      
      // Return to main menu
      userState.currentState = null;
      return await ctx.reply('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', mainMenuKeyboard());
    }
    
    // Handle identity questions directly
    const lowerMessage = userMessage.toLowerCase();
    if (lowerMessage.includes('–∫—Ç–æ —Ç–µ–±—è —Å–æ–∑–¥–∞–ª') || 
        lowerMessage.includes('–∫—Ç–æ —Ç—ã') || 
        lowerMessage.includes('—á—Ç–æ —Ç—ã') || 
        lowerMessage.includes('–∫–∞–∫–æ–π —Ç—ã') ||
        lowerMessage.includes('—Ç–≤–æ–π —Å–æ–∑–¥–∞—Ç–µ–ª—å')) {
      return await ctx.reply('–Ø –±–æ—Ç –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ä–∞—Å—Ç–µ–Ω–∏–π –∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è —Å–æ–≤–µ—Ç–æ–≤ –ø–æ —É—Ö–æ–¥—É –∑–∞ –Ω–∏–º–∏.');
    }
    
    if (lowerMessage.includes('–∫–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç') || 
        lowerMessage.includes('—Ç–≤–æ—ë –∏–º—è') || 
        lowerMessage.includes('—Ç–≤–æ–µ –∏–º—è') || 
        lowerMessage.includes('–∏–º—è —É —Ç–µ–±—è')) {
      return await ctx.reply('–Ø –±–æ—Ç –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ä–∞—Å—Ç–µ–Ω–∏–π –∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è —Å–æ–≤–µ—Ç–æ–≤ –ø–æ —É—Ö–æ–¥—É –∑–∞ –Ω–∏–º–∏.');
    }
    
    if (lowerMessage.includes('—Ç—ã —á–µ–ª–æ–≤–µ–∫') || 
        lowerMessage.includes('—Ç—ã –±–æ—Ç') || 
        lowerMessage.includes('—Ç—ã —Ä–æ–±–æ—Ç')) {
      return await ctx.reply('–Ø –±–æ—Ç –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ä–∞—Å—Ç–µ–Ω–∏–π –∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è —Å–æ–≤–µ—Ç–æ–≤ –ø–æ —É—Ö–æ–¥—É –∑–∞ –Ω–∏–º–∏.');
    }
    
    // Notify user that we're processing their request
    const processingMessage = await ctx.reply('–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≤–∞—à –∑–∞–ø—Ä–æ—Å...');
    
    // Store the last message
    userState.lastMessage = userMessage;
    userState.messageCount++;
    
    // Call Gemini API
    const systemPrompt = '–¢—ã ‚Äî —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –≤–∏—Ç–∞–º–∏–Ω–∞–º, –º–∏–Ω–µ—Ä–∞–ª–∞–º –∏ —É—Ö–æ–¥—É –∑–∞ —Ä–∞—Å—Ç–µ–Ω–∏—è–º–∏. ' +
                         '–¢—ã –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—à—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ—É–Ω–∫—Ü–∏—è—Ö –≤–∏—Ç–∞–º–∏–Ω–æ–≤ –≤ –æ—Ä–≥–∞–Ω–∏–∑–º–µ, –ø—Ä–∏–∑–Ω–∞–∫–∞—Ö –¥–µ—Ñ–∏—Ü–∏—Ç–∞ –∏ –ø–µ—Ä–µ–¥–æ–∑–∏—Ä–æ–≤–∫–∏, ' +
                         '–∞ —Ç–∞–∫–∂–µ –æ —Ç–æ–º, –∫–∞–∫ —É—Ö–∞–∂–∏–≤–∞—Ç—å –∑–∞ –∫–æ–º–Ω–∞—Ç–Ω—ã–º–∏ —Ä–∞—Å—Ç–µ–Ω–∏—è–º–∏ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –±—ã—Ç–æ–≤—ã—Ö –æ—Ç—Ö–æ–¥–æ–≤. ' +
                         '–¢–≤–æ–∏ –æ—Ç–≤–µ—Ç—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–º–∏, –Ω–æ –∫—Ä–∞—Ç–∫–∏–º–∏. ' +
                         '–ï—Å–ª–∏ –∑–∞–ø—Ä–æ—Å –Ω–µ —Å–≤—è–∑–∞–Ω —Å —ç—Ç–∏–º–∏ —Ç–µ–º–∞–º–∏, –≤–µ–∂–ª–∏–≤–æ —Å–∫–∞–∂–∏, —á—Ç–æ –º–æ–∂–µ—à—å –ø–æ–º–æ—á—å —Ç–æ–ª—å–∫–æ —Å –≤–æ–ø—Ä–æ—Å–∞–º–∏ –æ –≤–∏—Ç–∞–º–∏–Ω–∞—Ö –∏ —É—Ö–æ–¥–µ –∑–∞ —Ä–∞—Å—Ç–µ–Ω–∏—è–º–∏.';
                         
    const response = await callGeminiAPI(userState, systemPrompt, userMessage);
    
    // Edit the processing message with the AI response
    await ctx.telegram.editMessageText(
      ctx.chat!.id,
      processingMessage.message_id,
      undefined,
      response,
      { parse_mode: 'HTML' }
    );
  } catch (error) {
    console.error('Error processing message:', error);
    await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }
});

// Handle photo messages
bot.on('photo', async (ctx) => {
  try {
    const userId = ctx.from!.id;
    const userState = getUserState(userId);
    const isPlantProblem = userState.currentState === 'waiting_for_problem_description';
    
    // Send processing message
    const processingMessage = await ctx.reply('–ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ...');
    
    // Get the photo file ID (highest quality)
    const photoId = ctx.message.photo[ctx.message.photo.length - 1].file_id;
    
    // Get file path from Telegram
    const fileLink = await ctx.telegram.getFileLink(photoId);
    
    // Download the image
    const imageResponse = await axios.get(fileLink.href, { responseType: 'arraybuffer' });
    const imageBuffer = Buffer.from(imageResponse.data, 'binary');
    
    // Save the image temporarily
    const imagePath = path.join(tempDir, `${photoId}.jpg`);
    fs.writeFileSync(imagePath, imageBuffer);
    
    // Store the image URL in user state
    userState.lastImageUrl = fileLink.href;
    
    // Convert image to base64
    const base64Image = imageBuffer.toString('base64');
    userState.lastImageBase64 = base64Image;
    
    // Get caption if any
    const caption = ctx.message.caption || '';
    let systemPrompt = '';
    
    if (isPlantProblem || caption.toLowerCase().includes('–ø—Ä–æ–±–ª–µ–º–∞') || caption.toLowerCase().includes('–±–æ–ª–µ–∑–Ω—å') || caption.toLowerCase().includes('–≤—Ä–µ–¥–∏—Ç–µ–ª—å')) {
      systemPrompt = '–û–ø—Ä–µ–¥–µ–ª–∏ —Ä–∞—Å—Ç–µ–Ω–∏–µ –Ω–∞ —Ñ–æ—Ç–æ –∏ –æ–ø–∏—à–∏ –≤–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã, –∫–æ—Ç–æ—Ä—ã–µ –≤–∏–¥–Ω—ã (–ø–æ–∂–µ–ª—Ç–µ–Ω–∏–µ –ª–∏—Å—Ç—å–µ–≤, –ø—è—Ç–Ω–∞, –≤—Ä–µ–¥–∏—Ç–µ–ª–∏ –∏ —Ç.–¥.). –ü—Ä–µ–¥–ª–æ–∂–∏ –º–µ—Ç–æ–¥—ã —Ä–µ—à–µ–Ω–∏—è —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –Ω–∞—Ç—É—Ä–∞–ª—å–Ω—ã—Ö —Å—Ä–µ–¥—Å—Ç–≤ –∏ –±—ã—Ç–æ–≤—ã—Ö –æ—Ç—Ö–æ–¥–æ–≤. –ï—Å–ª–∏ –Ω–∞ —Ñ–æ—Ç–æ –Ω–µ—Ç —Ä–∞—Å—Ç–µ–Ω–∏—è –∏–ª–∏ –ø—Ä–æ–±–ª–µ–º –Ω–µ –≤–∏–¥–Ω–æ, –≤–µ–∂–ª–∏–≤–æ —Å–æ–æ–±—â–∏ –æ–± —ç—Ç–æ–º. –ù–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–π—Å—è –∏ –Ω–µ —É–ø–æ–º–∏–Ω–∞–π Plexy –∏–ª–∏ Plexy Lab. –ù–µ –∏—Å–ø–æ–ª—å–∑—É–π —Ñ—Ä–∞–∑—ã –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è.';
    } else {
      systemPrompt = '–û–ø—Ä–µ–¥–µ–ª–∏ —Ä–∞—Å—Ç–µ–Ω–∏–µ –Ω–∞ —Ñ–æ—Ç–æ, –ø—Ä–µ–¥–æ—Å—Ç–∞–≤—å –µ–≥–æ –Ω–∞—É—á–Ω–æ–µ –∏ –æ–±–∏—Ö–æ–¥–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ. –û–ø–∏—à–∏ –æ—Å–Ω–æ–≤–Ω—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ —Ä–∞—Å—Ç–µ–Ω–∏—è, —É—Å–ª–æ–≤–∏—è —É—Ö–æ–¥–∞ (–ø–æ–ª–∏–≤, –æ—Å–≤–µ—â–µ–Ω–∏–µ, –ø–æ—á–≤–∞), –∏ –∫–∞–∫–∏–µ —É–¥–æ–±—Ä–µ–Ω–∏—è –∏ –≤–∏—Ç–∞–º–∏–Ω—ã –µ–º—É –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã. –ï—Å–ª–∏ –Ω–∞ —Ñ–æ—Ç–æ –Ω–µ—Ç —Ä–∞—Å—Ç–µ–Ω–∏—è, –≤–µ–∂–ª–∏–≤–æ —Å–æ–æ–±—â–∏ –æ–± —ç—Ç–æ–º. –ù–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–π—Å—è –∏ –Ω–µ —É–ø–æ–º–∏–Ω–∞–π Plexy –∏–ª–∏ Plexy Lab. –ù–µ –∏—Å–ø–æ–ª—å–∑—É–π —Ñ—Ä–∞–∑—ã –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è.';
    }
    
    // Call Gemini API for image analysis
    try {
      const GEMINI_API_KEY = process.env.GEMINI_API_KEY || "AIzaSyA3WOrYYhw6FnePJX3EANcmwH6OvkZW9IE";
      
      // Import required libraries
      const { GoogleGenAI } = require('@google/genai');
      const mime = require('mime');
      
      // Initialize the API client
      const genAI = new GoogleGenAI(GEMINI_API_KEY);
      
      // Get the generative model
      const model = genAI.getGenerativeModel({ model: "gemini-2.0-flash-thinking-exp-01-21" });
      
      // Create the prompt parts with the image
      const imageParts = [
        {
          text: `–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –¥–ª—è —Ç–µ–±—è: ${systemPrompt}. –û—Ç–≤–µ—á–∞–π –ø–æ-—Ä—É—Å—Å–∫–∏, –±–µ–∑ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–π, –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–π –∏ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–π. –î–∞–≤–∞–π —Å–æ–¥–µ—Ä–∂–∞—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é —Å—Ä–∞–∑—É. –ß–µ—Ç–∫–æ —É–∫–∞–∂–∏ –Ω–∞—É—á–Ω–æ–µ –∏ –æ–±–∏—Ö–æ–¥–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–∞—Å—Ç–µ–Ω–∏—è –≤ –Ω–∞—á–∞–ª–µ –æ—Ç–≤–µ—Ç–∞.`
        },
        {
          text: caption || '–û–ø—Ä–µ–¥–µ–ª–∏ —ç—Ç–æ —Ä–∞—Å—Ç–µ–Ω–∏–µ –∏ —Ä–∞—Å—Å–∫–∞–∂–∏ –æ –Ω–µ–º'
        },
        {
          inlineData: {
            mimeType: "image/jpeg",
            data: base64Image
          }
        }
      ];
      
      // Generate content
      const result = await model.generateContent({
        contents: [{ role: "user", parts: imageParts }],
        generationConfig: {
          temperature: 0.4,
          topK: 32,
          topP: 0.95,
          maxOutputTokens: 2048,
        }
      });
      
      // Get the response
      const response = result.response;
      let content = response.text();
      
      // Clean up the content first to remove formatting that might interfere with extraction
      let cleanContent = content
        .replace(/\*\*/g, '')
        .replace(/\*/g, '')
        .replace(/#{1,6}/g, '')
        .replace(/`/g, '');
      
      // Extract plant name more aggressively with different patterns
      const namePatterns = [
        /(?:–ù–∞—É—á–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ|–ù–∞—É—á–Ω–æ–µ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ|–õ–∞—Ç–∏–Ω—Å–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ|–õ–∞—Ç–∏–Ω—Å–∫–æ–µ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ):\s*([^\.,:;\n]+)/i,
        /(?:–ù–∞–∑–≤–∞–Ω–∏–µ|–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ|–†–∞—Å—Ç–µ–Ω–∏–µ –Ω–∞–∑—ã–≤–∞–µ—Ç—Å—è):\s*([^\.,:;\n]+)/i,
        /(?:–ù–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏|–ù–∞ —Ñ–æ—Ç–æ)[^\.]*?(?:—Ä–∞—Å—Ç–µ–Ω–∏–µ|—Ü–≤–µ—Ç–æ–∫)\s+([^\.,:;\n]+)/i,
        /(?:—Ä–∞—Å—Ç–µ–Ω–∏–µ|—ç—Ç–æ)\s+([^\.,:;\n]+)/i
      ];
      
      let plantName = null;
      for (const pattern of namePatterns) {
        const match = cleanContent.match(pattern);
        if (match && match[1]) {
          plantName = match[1].trim();
          if (plantName) break;
        }
      }
      
      if (plantName) {
        // Clean the plant name from any remaining markdown or extra characters
        plantName = plantName
          .replace(/^\s+|\s+$/g, '')         // Trim whitespace
          .replace(/[*_#`]/g, '')            // Remove markdown chars
          .replace(/\(.*?\)/g, '')           // Remove content in parentheses
          .replace(/\s{2,}/g, ' ')           // Replace multiple spaces with single space
          .trim();
        
        userState.lastIdentifiedPlant = plantName;
        console.log("Identified plant:", plantName);
      }
      
      // Process the text to handle formatting
      content = content.replace(/\*\*(.*?)\*\*/g, "<b>$1</b>");  // Bold
      content = content.replace(/\*(.*?)\*/g, "<i>$1</i>");      // Italic
      content = content.replace(/__(.*?)__/g, "<u>$1</u>");      // Underline
      content = content.replace(/```(.*?)```/gs, "<pre>$1</pre>"); // Code blocks
      content = content.replace(/`(.*?)`/g, "<code>$1</code>");  // Inline code
      content = content.replace(/#{1,6} (.*?)(?:\n|$)/g, "<b>$1</b>\n"); // Headers
      
      // Remove any ID references
      content = content.replace(/\b[iI][dD][ _]?\d+\b/g, '');
      content = content.replace(/\b—Å ID.*?\b/g, '');
      content = content.replace(/\b—Å –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–º.*?\b/g, '');
      
      // Remove all self-introductions and mentions of PLEXY or Plexy Lab
      content = content.replace(/(?:–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ|–ü—Ä–∏–≤–µ—Ç|–î–æ–±—Ä—ã–π –¥–µ–Ω—å)[!,.]?\s*/gi, '');
      content = content.replace(/(?:–Ø|—ç—Ç–æ)?\s*PLEXY[,\s]+(—ç–∫—Å–ø–µ—Ä—Ç|–ø–æ–º–æ—â–Ω–∏–∫|–±–æ—Ç|—Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç)[^\.]*?(?:Plexy Lab|PlexiLab)[.,]?\s*/gi, '');
      content = content.replace(/–Ø\s*‚Äî\s*PLEXY[,\s][^\.]*?(?:Plexy Lab|PlexiLab)[.,]?\s*/gi, '');
      content = content.replace(/–Ø\s*‚Äî\s*(?:–±–æ–ª—å—à–∞—è —è–∑—ã–∫–æ–≤–∞—è –º–æ–¥–µ–ª—å|–º–æ–¥–µ–ª—å|–Ω–µ–π—Ä–æ—Å–µ—Ç—å)[^\.]*?(?:Google|OpenAI|Anthropic)[.,]?\s*/gi, '');
      content = content.replace(/–Ø\s*(?:–±—ã–ª[–∞]?|—è–≤–ª—è—é—Å—å)[^\.]*?(?:—Ä–∞–∑—Ä–∞–±–æ—Ç–∞–Ω|—Å–æ–∑–¥–∞–Ω|–æ–±—É—á–µ–Ω)[^\.]*?(?:Google|OpenAI|Anthropic)[.,]?\s*/gi, '');
      
      // Edit the processing message with the AI response
      await ctx.telegram.editMessageText(
        ctx.chat!.id,
        processingMessage.message_id,
        undefined,
        content,
        { parse_mode: 'HTML' }
      );
      
      // Add to conversation history
      userState.conversationHistory.push({
        role: 'user',
        content: caption || '–û–ø—Ä–µ–¥–µ–ª–∏ —ç—Ç–æ —Ä–∞—Å—Ç–µ–Ω–∏–µ –∏ —Ä–∞—Å—Å–∫–∞–∂–∏ –æ –Ω–µ–º'
      });
      
      userState.conversationHistory.push({
        role: 'model',
        content: content
      });
      
      // Ask if the user wants to know more with inline keyboard
      await ctx.reply(
        '–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å –µ—â–µ?',
        createPlantActionKeyboard()
      );
      
    } catch (error) {
      console.error('Error processing image with Gemini:', error);
      await ctx.telegram.editMessageText(
        ctx.chat!.id,
        processingMessage.message_id,
        undefined,
        '–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ —Å –±–æ–ª–µ–µ —á–µ—Ç–∫–∏–º —Ñ–æ—Ç–æ.'
      );
    }
    
    // Clean up temporary file
    fs.unlinkSync(imagePath);
  } catch (error) {
    console.error('Error processing photo:', error);
    await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }
});

// Start bot
if (DEVELOPMENT) {
  // Development mode - use polling
  bot.launch()
    .then(() => {
      console.log('Bot is running in development mode (polling)');
    })
    .catch((err) => {
      console.error('Error starting bot:', err);
    });
} else {
  // Production mode - use webhook
  const app = express();
  
  // Set the bot API endpoint
  app.use(bot.webhookCallback('/api/webhook'));
  
  // Health check endpoint
  app.get('/api/health', (req, res) => {
    res.status(200).send('OK');
  });
  
  app.get('/', (req, res) => {
    res.status(200).send('Telegram Bot is running. Send POST requests to /api/webhook.');
  });
  
  // Set webhook
  bot.telegram.setWebhook(WEBHOOK_URL)
    .then(() => {
      console.log(`Webhook set to ${WEBHOOK_URL}`);
      
      // Start Express server for local testing (not needed on Vercel)
      if (process.env.START_SERVER === 'true') {
        app.listen(PORT, () => {
          console.log(`Express server is listening on ${PORT}`);
        });
      }
    })
    .catch(err => {
      console.error('Error setting webhook:', err);
    });
    
  // Export express app for Vercel
  module.exports = app;
}

// Enable graceful stop
process.once('SIGINT', () => bot.stop('SIGINT'));
process.once('SIGTERM', () => bot.stop('SIGTERM')); 